{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/app.yaml","path":"app.yaml","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/assets/logo-64.png","path":"assets/logo-64.png","modified":0,"renderable":0},{"_id":"source/assets/logo-blue-short.png","path":"assets/logo-blue-short.png","modified":0,"renderable":0},{"_id":"source/assets/logo-blue.png","path":"assets/logo-blue.png","modified":0,"renderable":0},{"_id":"source/assets/logo-green-short.png","path":"assets/logo-green-short.png","modified":0,"renderable":0},{"_id":"source/assets/logo-green.png","path":"assets/logo-green.png","modified":0,"renderable":0},{"_id":"source/assets/logo.png","path":"assets/logo.png","modified":0,"renderable":0},{"_id":"source/assets/logo.ai","path":"assets/logo.ai","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"source/assets/logo.psd","path":"assets/logo.psd","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b25ce639a950b66eaa6a0646bc5ac738c0bb5bd2","modified":1466257758242},{"_id":"source/app.yaml","hash":"e532bcac43ac53acd722318136a410d5b0e3ebdf","modified":1461910628000},{"_id":"source/favicon.ico","hash":"5dda187def7a492cc4b659e4f671a9f82c78e7d7","modified":1461910628000},{"_id":"source/robots.txt","hash":"c87003668ea52a5fa648d3d4f74f7c122ab33c21","modified":1461910628000},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1461910628000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1461910628000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1461910628000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1461910628000},{"_id":"themes/landscape/_config.yml","hash":"91c45c39b4aaad59636b5868853b0d08c8728171","modified":1466350340000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1461910628000},{"_id":"source/about/index.md","hash":"b481cd013fc5d415bd1c431e67517355601598a9","modified":1461910628000},{"_id":"source/assets/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1461910628000},{"_id":"source/assets/logo-64.png","hash":"50c3bd9ee3f47c4c07ac584cf887759078ab230c","modified":1461910628000},{"_id":"source/assets/logo-blue-short.png","hash":"ca6fc226e8551310b67785def22cfd6a2d29837a","modified":1461910628000},{"_id":"source/assets/logo-blue.png","hash":"b9a634fa2f95b6510ccfc0973f75c4a754e26e71","modified":1461910628000},{"_id":"source/assets/logo-green-short.png","hash":"dbd857a04a5f3e9f8d89757173973fe7651bdf38","modified":1461910628000},{"_id":"source/assets/logo-green.png","hash":"699bd26a92d9931fb95de4a359fb5719c94ee609","modified":1461910628000},{"_id":"source/assets/logo.png","hash":"8f9638efcfa4552583fc9e67eaef88a70433953c","modified":1461910628000},{"_id":"source/css/mystyles.css","hash":"dc8a3b1960b1c458b74a970b087011b2bff0a79e","modified":1461910628000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1461910628000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1461910628000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1461910628000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1461910628000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1461910628000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1461910628000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1461910628000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1461910628000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1461910628000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1461910628000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1461910628000},{"_id":"themes/landscape/layout/page.ejs","hash":"a05fd1a27e1c54c9dbab9e69a257a299b0f549cc","modified":1461910628000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1461910628000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1461910628000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1461910628000},{"_id":"source/assets/logo.ai","hash":"dd07244f2ce823119c0847f35cc99216441025f7","modified":1461910628000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"8fdf6dc1a62d7b1649d069f9179f90498a1ff5b2","modified":1461910628000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1461910628000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1461910628000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"12bd7972cdf525d5de86084a663d2371b2732e43","modified":1461910628000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1461910628000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1461910628000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"2c3343dcb55cbcfdaa5bb89c8579cc685f83e312","modified":1461910628000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"26b8e1dbf7673e0902a2361ed6f835ad582d2a99","modified":1466350198000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1461910628000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1461910628000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"5c61d477a07c3202f09a7d284b50edeef03b06ae","modified":1461910628000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1461910628000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"ed42fe41ee3671fc64a4651ae28dfd0da6cd921c","modified":1461910628000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1461910628000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1461910628000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1461910628000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"1e49ee277d736b64dbed589cf8629d8b6d7a7a39","modified":1461910628000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1461910628000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1461910628000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1461910628000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1461910628000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1461910628000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1461910628000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1461910628000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1461910628000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1461910628000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1461910628000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1461910628000},{"_id":"source/assets/logo.psd","hash":"840e699db8779d806223d65d3afeef9acb6dd67c","modified":1461910628000},{"_id":"source/_posts/2016/03/hello-world-for-oracle-commerce.md","hash":"b2273af2571d6566a859327d13d74f17ccb34a59","modified":1461910628000},{"_id":"source/_posts/2016/03/patch-utility-for-perforce.md","hash":"d982908f320d0bf76772c67113adee01001f1cfa","modified":1461910628000},{"_id":"source/_posts/2016/04/disable-dynadmin-auth-dev-env-oracle-commerce.md","hash":"71f6fb50515d62dab73a2dfcd3696f7453523441","modified":1461910628000},{"_id":"source/_posts/2016/04/restricting-ojinputtext-for-numericals.md","hash":"6a77ba176abfdc780c428c4cf9d8221be69a88c5","modified":1466257758242},{"_id":"source/_posts/2016/04/solving-jam-coins.md","hash":"74d8a5c273bf3f71c1c3ceb2ff45d8a1449274f5","modified":1461910628000},{"_id":"source/_posts/2016/05/non-recursive-breadth-first-traversal-binary-tree.md","hash":"a1ab2ac186dfd760a30fb32e0dcb5fbd0629de9a","modified":1466257758242},{"_id":"source/_posts/2016/06/collapsible-panel-in-oracle-jet.md","hash":"138cf3c8956e4c1fa87d44fe161d1696dba534f0","modified":1466257758242},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1461910628000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"5d465c0f9e63a164a030b2c49aa673fbd4c24d62","modified":1461910628000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1461910628000},{"_id":"themes/landscape/layout/_partial/post/icons.ejs","hash":"b4827f2c45f7d1c5d51ab7b4cbb375bf7400ebcc","modified":1461910628000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1461910628000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1461910628000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1461910628000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1461910628000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1461910628000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1461910628000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"7ed2129fa62acc01ef9c4991d04db33cb2dcf5ee","modified":1461910628000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1461910628000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"febb90972612f3147dfc184e53118a7e3dbb4fb0","modified":1461910628000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"59d6ed20f9b9f792f2ec4ad5507ddaac1a586468","modified":1461910628000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1461910628000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1461910628000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"0517af1f87b241d2ac1f95bb10cd070c618824b7","modified":1461910628000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1461910628000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1461910628000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1461910628000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1461910628000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1461910628000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1461910628000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1461910628000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1461910628000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1461910628000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1461910628000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1461910628000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1461910628000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1461910628000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1461910628000},{"_id":"public/css/mystyles.css","hash":"dc8a3b1960b1c458b74a970b087011b2bff0a79e","modified":1466269790687},{"_id":"public/atom.xml","hash":"5cb9745fac9185728dbd0ca5b902a38f48da2685","modified":1469199799975},{"_id":"public/sitemap.xml","hash":"3c9630585248f4dc14374c4f578780aea9c13013","modified":1469199799348},{"_id":"public/about/index.html","hash":"3d1682e1309a53c0b620d64656142f9ee3be0735","modified":1469199799967},{"_id":"public/2016/04/restricting-ojinputtext-for-numericals/index.html","hash":"135f97865ff563b56a7b32e64058d72b41abd669","modified":1469199800020},{"_id":"public/2016/04/disable-dynadmin-auth-dev-env-oracle-commerce/index.html","hash":"b53f51cf99d3e08df02520673f9a82a185baefaf","modified":1469199800020},{"_id":"public/2016/03/patch-utility-for-perforce/index.html","hash":"e0621bbbc76d794c95a29cdcf8452c2d55c18216","modified":1469199800020},{"_id":"public/archives/index.html","hash":"c2ef175b21d6ff066ed880fb0653460b3526b473","modified":1469199800020},{"_id":"public/archives/page/2/index.html","hash":"0f3d7c58b3fa4f1ea5373592c0c6ac0203ce5211","modified":1469199800020},{"_id":"public/archives/2016/index.html","hash":"185a37a9c4c0990a9ff0b2756d02d3e093526283","modified":1469199800021},{"_id":"public/archives/2016/page/2/index.html","hash":"c7b80927cf8eb2a761fd4c5412441e2679c618c7","modified":1469199800021},{"_id":"public/archives/2016/03/index.html","hash":"ce07673261e8c15c7337a6af6aaac016e45d6ebf","modified":1469199800021},{"_id":"public/archives/2016/04/index.html","hash":"71c9c42a77fe8d43d83991cee5900592e4fb9758","modified":1469199800021},{"_id":"public/archives/2016/05/index.html","hash":"c0e72f556c45ccd4c8b3ff5fbefb66df416026fe","modified":1469199800021},{"_id":"public/archives/2016/06/index.html","hash":"f76f6111f5ad4b554ba194b83b4c4e627d853e05","modified":1469199800021},{"_id":"public/page/2/index.html","hash":"c6a56a8218e02608eb4e5a79fc704604cc5fa925","modified":1469199800023},{"_id":"public/tags/atg/index.html","hash":"0bd5d6ff96a7009ccb31de9138fbbd4f4b8011af","modified":1469199800021},{"_id":"public/tags/java/index.html","hash":"3c5bf509a03f9b9eccb7153bc66f64d489dbc96f","modified":1469199800021},{"_id":"public/tags/oraclecommerce/index.html","hash":"ceccdaa4982eecda948c30905748d4b2d49146d9","modified":1469199800021},{"_id":"public/tags/configuration/index.html","hash":"b8f8dd42a70a859ded868c2ee6c1672521b0c834","modified":1469199800021},{"_id":"public/tags/hack/index.html","hash":"99798d6a5af43dd2b58900cd7bbd923f40c11404","modified":1469199800021},{"_id":"public/tags/oraclejet/index.html","hash":"4d1d0cdccdb235715125f3e0d56655f817da2491","modified":1469199800021},{"_id":"public/tags/javascript/index.html","hash":"2dbfebe52c797aea5ea3a05bd415105b01883f03","modified":1469199800021},{"_id":"public/tags/html/index.html","hash":"d75e18ffcbd15be13037ebcbd105bad007a68087","modified":1469199800021},{"_id":"public/tags/problems/index.html","hash":"836052441bc167f2f3690916feee4673a91b4b54","modified":1469199800021},{"_id":"public/tags/codejam/index.html","hash":"fb92b7a67a0ce41cf53a7b24fc64567af8ccb4b3","modified":1469199800021},{"_id":"public/tags/puzzle/index.html","hash":"4987b42f932f24bdf0111e5ca1d40826e2dfcd84","modified":1469199800021},{"_id":"public/tags/competition/index.html","hash":"bde009ba7e02b9c3b0acd2b4bd4775445508dcc5","modified":1469199800022},{"_id":"public/tags/solution/index.html","hash":"d3639f2fd80aaf08c9f7157f538101eab4b1f9f8","modified":1469199800022},{"_id":"public/tags/algorithms/index.html","hash":"6e1d08652b1a473fb7500396cb4524ceb4c5b72f","modified":1469199800022},{"_id":"public/tags/datastructures/index.html","hash":"09df159cfc9a43dfe20e718b6ed0a83a14840ff7","modified":1469199800022},{"_id":"public/tags/javafx/index.html","hash":"7b242354727226ea8001d8b593d36bd780fd4ede","modified":1469199800022},{"_id":"public/tags/opensource/index.html","hash":"07edb9872fe5515957fb18f95e21bbd7d7b7c2fe","modified":1469199800022},{"_id":"public/tags/perforce/index.html","hash":"9cba09837acefd8de2160c09a284a107b4709df8","modified":1469199800022},{"_id":"public/tags/knockoutjs/index.html","hash":"70fc70ebd578ec6ebd8056181915d3e5028849c9","modified":1469199800022},{"_id":"public/tags/jquery/index.html","hash":"8a89d7f647a99e19ecf67592a60fb135a2f9466d","modified":1469199800022},{"_id":"public/tags/css/index.html","hash":"f53fdc77a5d942c872efaa8986eea7aad9d17eeb","modified":1469199800022},{"_id":"public/2016/06/collapsible-panel-in-oracle-jet/index.html","hash":"b4546d4d7ffb7d05d800ac031a294c07bb839989","modified":1469199800022},{"_id":"public/2016/05/non-recursive-breadth-first-traversal-binary-tree/index.html","hash":"993f18ec07f02e49cb6f2fe68a6a1f1abd4bfc9d","modified":1469199800022},{"_id":"public/2016/04/solving-jam-coins/index.html","hash":"1da938ae5ae698e24c506c4033f81ac55d4ef4d8","modified":1469199800022},{"_id":"public/2016/03/hello-world-for-oracle-commerce/index.html","hash":"6dad08df03fa13fdcd556e4ce2360e9b453c3651","modified":1469199800022},{"_id":"public/index.html","hash":"184740486972faf2fc9b9d2634a71b3591503264","modified":1469199800023},{"_id":"public/app.yaml","hash":"e532bcac43ac53acd722318136a410d5b0e3ebdf","modified":1466269790740},{"_id":"public/favicon.ico","hash":"5dda187def7a492cc4b659e4f671a9f82c78e7d7","modified":1466269790740},{"_id":"public/robots.txt","hash":"c87003668ea52a5fa648d3d4f74f7c122ab33c21","modified":1466269790740},{"_id":"public/assets/logo-64.png","hash":"50c3bd9ee3f47c4c07ac584cf887759078ab230c","modified":1466269790740},{"_id":"public/assets/logo-blue-short.png","hash":"ca6fc226e8551310b67785def22cfd6a2d29837a","modified":1466269790740},{"_id":"public/assets/logo-blue.png","hash":"b9a634fa2f95b6510ccfc0973f75c4a754e26e71","modified":1466269790740},{"_id":"public/assets/logo-green-short.png","hash":"dbd857a04a5f3e9f8d89757173973fe7651bdf38","modified":1466269790740},{"_id":"public/assets/logo-green.png","hash":"699bd26a92d9931fb95de4a359fb5719c94ee609","modified":1466269790741},{"_id":"public/assets/logo.png","hash":"8f9638efcfa4552583fc9e67eaef88a70433953c","modified":1466269790741},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1466269790741},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1466269790741},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1466269790741},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1466269790741},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1466269790741},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1466269790741},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1466269790742},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1466269790742},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1466269790742},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1466269790742},{"_id":"public/assets/logo.ai","hash":"dd07244f2ce823119c0847f35cc99216441025f7","modified":1466269792124},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1466269792127},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1466269792135},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1466269792135},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1466269792135},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1466269792135},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1466269792136},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1466269792136},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1466269792137},{"_id":"public/css/style.css","hash":"1a1e61acdf2595bd5fac6d7404b188259dd3b7b6","modified":1466269792137},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1466269792137},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1466269792137},{"_id":"public/assets/logo.psd","hash":"840e699db8779d806223d65d3afeef9acb6dd67c","modified":1466269792141},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1466269792141},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1466269792141},{"_id":"source/_posts/2016/07/right-view-of-binarytree-without-recursion.md","hash":"1a4dc9457530f1b1ea55479ed80a796419918f88","modified":1469199734000},{"_id":"public/archives/2016/07/index.html","hash":"4d41b92b1ddb1b29f5bc6244e2adfdc7ecbbad67","modified":1469199800024},{"_id":"public/tags/solutions/index.html","hash":"13989516bf05d2de71d841b024a57c9ddf2b0df1","modified":1469199800025},{"_id":"public/2016/07/right-view-of-binarytree-without-recursion/index.html","hash":"a54e770f97caa818226c9c8808e1e7e1c90cd799","modified":1469199800025}],"Category":[],"Data":[],"Page":[{"title":"About","date":"2016-03-31T21:19:41.000Z","author":"Buddha","description":"About Ctrl+Space","comments":0,"page":true,"_content":"![Ctrl+Space](https://farm2.staticflickr.com/1718/25631720110_e964ccf788_n.jpg)\nCtrl+Space is the first shortcut every programmer learns and it becomes part of day to day workflow irrespective of the programming language they code in. This helps any programmer the most. We use this as involuntarily as we blink or breath.\n\nThis blog is about providing such helpful tutorials, tips, tricks every programmer needs. This blog ventures into multiple platforms, programming languages. There are no boundaries.\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2016-04-01 02:49:41\nauthor: Buddha\ndescription: About Ctrl+Space\ncomments: false\npage: true\n---\n![Ctrl+Space](https://farm2.staticflickr.com/1718/25631720110_e964ccf788_n.jpg)\nCtrl+Space is the first shortcut every programmer learns and it becomes part of day to day workflow irrespective of the programming language they code in. This helps any programmer the most. We use this as involuntarily as we blink or breath.\n\nThis blog is about providing such helpful tutorials, tips, tricks every programmer needs. This blog ventures into multiple platforms, programming languages. There are no boundaries.\n","updated":"2016-04-29T06:17:08.000Z","path":"about/index.html","layout":"page","_id":"ciplf69g90000ouygrdrbv6dq","content":"<p><img src=\"https://farm2.staticflickr.com/1718/25631720110_e964ccf788_n.jpg\" alt=\"Ctrl+Space\"><br>Ctrl+Space is the first shortcut every programmer learns and it becomes part of day to day workflow irrespective of the programming language they code in. This helps any programmer the most. We use this as involuntarily as we blink or breath.</p>\n<p>This blog is about providing such helpful tutorials, tips, tricks every programmer needs. This blog ventures into multiple platforms, programming languages. There are no boundaries.</p>\n","excerpt":"","more":"<p><img src=\"https://farm2.staticflickr.com/1718/25631720110_e964ccf788_n.jpg\" alt=\"Ctrl+Space\"><br>Ctrl+Space is the first shortcut every programmer learns and it becomes part of day to day workflow irrespective of the programming language they code in. This helps any programmer the most. We use this as involuntarily as we blink or breath.</p>\n<p>This blog is about providing such helpful tutorials, tips, tricks every programmer needs. This blog ventures into multiple platforms, programming languages. There are no boundaries.</p>\n"},{"_content":".admonition {\n  padding: 0 5px;\n  margin-bottom: 10px;\n  margin-left: 2.5em;\n  border: 1px solid transparent;\n  border-left: 4px solid;\n  border-radius: 1px;\n  text-align: left;\n}\n\n.admonition-title {\n  font-weight: bold;\n  text-align: left;\n}\n\n.admonition.note,\n.admonition.info,\n.admonition.tips {\n  color: #1d6fa5;\n  background-color: #a0cfee;\n  border-color: #3498db;\n}\n\n.admonition.warning,\n.admonition.warn,\n.admonition.important {\n  color: #a85913;\n  background-color: #f3c195;\n  border-color: #e67e22;\n}\n\n.admonition.danger,\n.admonition.critical {\n  color: #bf2718;\n  background-color: #f5b4ae;\n  border-color: #e74c3c;\n}\n\n.recents {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n#header-outer {\n  height: initial;\n}\n\n#banner {\n  background: center #000;\n}\n","source":"css/mystyles.css","raw":".admonition {\n  padding: 0 5px;\n  margin-bottom: 10px;\n  margin-left: 2.5em;\n  border: 1px solid transparent;\n  border-left: 4px solid;\n  border-radius: 1px;\n  text-align: left;\n}\n\n.admonition-title {\n  font-weight: bold;\n  text-align: left;\n}\n\n.admonition.note,\n.admonition.info,\n.admonition.tips {\n  color: #1d6fa5;\n  background-color: #a0cfee;\n  border-color: #3498db;\n}\n\n.admonition.warning,\n.admonition.warn,\n.admonition.important {\n  color: #a85913;\n  background-color: #f3c195;\n  border-color: #e67e22;\n}\n\n.admonition.danger,\n.admonition.critical {\n  color: #bf2718;\n  background-color: #f5b4ae;\n  border-color: #e74c3c;\n}\n\n.recents {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n#header-outer {\n  height: initial;\n}\n\n#banner {\n  background: center #000;\n}\n","date":"2016-06-18T13:47:04.766Z","updated":"2016-04-29T06:17:08.000Z","path":"css/mystyles.css","layout":"false","title":"","comments":1,"_id":"ciplf69gm0001ouygovm8yr0d","content":".admonition {\n  padding: 0 5px;\n  margin-bottom: 10px;\n  margin-left: 2.5em;\n  border: 1px solid transparent;\n  border-left: 4px solid;\n  border-radius: 1px;\n  text-align: left;\n}\n\n.admonition-title {\n  font-weight: bold;\n  text-align: left;\n}\n\n.admonition.note,\n.admonition.info,\n.admonition.tips {\n  color: #1d6fa5;\n  background-color: #a0cfee;\n  border-color: #3498db;\n}\n\n.admonition.warning,\n.admonition.warn,\n.admonition.important {\n  color: #a85913;\n  background-color: #f3c195;\n  border-color: #e67e22;\n}\n\n.admonition.danger,\n.admonition.critical {\n  color: #bf2718;\n  background-color: #f5b4ae;\n  border-color: #e74c3c;\n}\n\n.recents {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n#header-outer {\n  height: initial;\n}\n\n#banner {\n  background: center #000;\n}\n","excerpt":"","more":".admonition {\n  padding: 0 5px;\n  margin-bottom: 10px;\n  margin-left: 2.5em;\n  border: 1px solid transparent;\n  border-left: 4px solid;\n  border-radius: 1px;\n  text-align: left;\n}\n\n.admonition-title {\n  font-weight: bold;\n  text-align: left;\n}\n\n.admonition.note,\n.admonition.info,\n.admonition.tips {\n  color: #1d6fa5;\n  background-color: #a0cfee;\n  border-color: #3498db;\n}\n\n.admonition.warning,\n.admonition.warn,\n.admonition.important {\n  color: #a85913;\n  background-color: #f3c195;\n  border-color: #e67e22;\n}\n\n.admonition.danger,\n.admonition.critical {\n  color: #bf2718;\n  background-color: #f5b4ae;\n  border-color: #e74c3c;\n}\n\n.recents {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n#header-outer {\n  height: initial;\n}\n\n#banner {\n  background: center #000;\n}\n"}],"Post":[{"title":"Hello World for Oracle Commerce (ATG)","date":"2016-03-05T18:30:00.000Z","author":"Buddha","description":"Oracle Commerce or ATG is an Ocean. Beginning it is so difficult. There are so many new things to learn before you can write a program that runs on this platform. This article helps you learn how to begin with creating new components in Oracle Commerce.","_content":"There are so many concepts in Oracle Commerce (previously known as ATG), that makes coming up with Hello World program little difficult. Do you mean to create one JSP page and deploy it like commerce reference store? Do you want to create a component just to see in Dyn/Admin? Do you want to create a hello world repository? Depending on what you want to do, the approach to take will be different.\n![Too many options to begin with](https://farm2.staticflickr.com/1633/25195316629_65c8162a37_n.jpg)\nTo work with Oracle Commerce, you don’t have to know about persisting data in database. If you approach Oracle Commerce programming with J2EE & MVC experience, you may find it little difficult to cope with it unless you start with a fresh mind, because things are very different in this platform.\n\nToday, I will demonstrate how to create a simple component so that it can be viewed in Dyn/Admin. Let us assume that you are trying to create it in your own module instead of existing module like DAS or DAF. Follow the the steps shown below.\n\n## Step 1: Create an Eclipse project\n\nCreate an Eclipse project and make sure you add all the necessary class files to the build path. Add classes.jar or DAS at the least.\n<!-- more -->\n![Sample Eclipse Project Structure](http://i.stack.imgur.com/OP8b7.png)\n## Step 2: Create the Java Class\n\nA component in Oracle Commerce is combination of two files. A Java Class and a Properties File. The Java class can be a simple bean or can be a service that performs several tasks based on a schedule. Simplest way to create the necessary Java class is to extend GenericService.\n\n\n{% codeblock HelloWorldComponent.java lang:java  %}\npackage com.buddha.components;\n\nimport atg.nucleus.GenericService;\nimport atg.nucleus.ServiceException;\n\npublic class HelloWorldComponent extends GenericService {\n\n    public String firstStr = \"Dummy Value\";\n\n    public String getFirstStr() {\n        return firstStr;\n    }\n\n    public void setFirstStr(String firstStr) {\n        this.firstStr = firstStr;\n    }\n\n    @Override\n    public void doStartService() throws ServiceException {\n        super.doStartService();\n        System.out.println(\"Hello ATG Component!\");\n    }\n\n    @Override\n    public void doStopService() throws ServiceException {\n        super.doStopService();\n        System.out.println(\"Hello ATG Component! Stops now!\");\n    }\n}\n{% endcodeblock %}\n\n## Step 3: Create the properties file\n\nThe Properties file must be providing the values to the properties in the component. This initialises the bean. `$class` property will link the property file with the class file we have created in previous step. Location of the propety file decides the path of the component instead of the java class. Follow the example below to create the property file.\n\n{% codeblock HelloWorldComponent.properties lang:java  %}\n$class=com.buddha.components.HelloWorldComponent\nfirstStr=HelloWorld\n{% endcodeblock %}\n\nMultiple components can be created from the same class file. A different properties file can have same `$class` but initialise firstStr to a different value. This creates a different component.\n\n## Step 4: Create a Manifest file\n\nManifest files is like a configuration for the module. What all are its dependencies when it is running in webserver, where are the compiled classes placed etc.,\n\n{% codeblock Manifest.MF  %}\nManifest-Version: 1.0\nATG-Required: DafEar.Admin\nATG-Config-Path: config/\nATG-Class-Path: ./bin/\n{% endcodeblock %}\n## Step 5: Build & Deploy\nBuild the project and copy the project folder into ${DYNAMO_ROOT} and run the following command to generate an ear file of your project and deploy it in your jboss server. No need to generate any ear file if you are running it on Tomcat. Just start the respective server with the given module.\n\n```\nrunAssembler.bat -jboss HelloWorld.ear -m EXP_HelloATGComponentWorld\n```\n## Step 6: Access the Component\n\nNavigate to Dyn/Admin and search for the component HelloWorldComponent and click on the component listed in the search results.\n\n![Search Results in DynAdmin](http://i.stack.imgur.com/urvDL.png)\n\nClick on it to go to the component page to see the property we have created and its value given in properties file.\n\n![Component & the property we have created earlier](http://i.stack.imgur.com/sWi9t.png)\n\nYou can see the server log to find a line similar to this.\n\n```\nINFO  [stdout] /dyn/admin/nucleus//com/buddha/components/HelloWorldComponent Hello ATG Component!\n.....\nINFO  [stdout] /dyn/admin/nucleus//com/buddha/components/HelloWorldComponent Hello ATG Component! Stops now!\n```\nThis line is generated because of the sysout in our doStartService(); You can also give other methods that can be called through dyn/admin or interact with other components. However in production, avoid using System.out.println, instead use loggingDebug or loggingInfo. Best of Luck.\n\n----\n\nHere is an interesting non-technical blog post that I came across recently: [Reading a book vs Watching a Movie Adaption](https://unfurledpages.wordpress.com/2016/03/21/turning-pages-or-tuning-channels/) \n","source":"_posts/2016/03/hello-world-for-oracle-commerce.md","raw":"---\ntitle: Hello World for Oracle Commerce (ATG)\ndate: 2016-03-06\ntags: ['atg', 'java', 'oraclecommerce']\nauthor: Buddha\ndescription: Oracle Commerce or ATG is an Ocean. Beginning it is so difficult. There are so many new things to learn before you can write a program that runs on this platform. This article helps you learn how to begin with creating new components in Oracle Commerce.\n---\nThere are so many concepts in Oracle Commerce (previously known as ATG), that makes coming up with Hello World program little difficult. Do you mean to create one JSP page and deploy it like commerce reference store? Do you want to create a component just to see in Dyn/Admin? Do you want to create a hello world repository? Depending on what you want to do, the approach to take will be different.\n![Too many options to begin with](https://farm2.staticflickr.com/1633/25195316629_65c8162a37_n.jpg)\nTo work with Oracle Commerce, you don’t have to know about persisting data in database. If you approach Oracle Commerce programming with J2EE & MVC experience, you may find it little difficult to cope with it unless you start with a fresh mind, because things are very different in this platform.\n\nToday, I will demonstrate how to create a simple component so that it can be viewed in Dyn/Admin. Let us assume that you are trying to create it in your own module instead of existing module like DAS or DAF. Follow the the steps shown below.\n\n## Step 1: Create an Eclipse project\n\nCreate an Eclipse project and make sure you add all the necessary class files to the build path. Add classes.jar or DAS at the least.\n<!-- more -->\n![Sample Eclipse Project Structure](http://i.stack.imgur.com/OP8b7.png)\n## Step 2: Create the Java Class\n\nA component in Oracle Commerce is combination of two files. A Java Class and a Properties File. The Java class can be a simple bean or can be a service that performs several tasks based on a schedule. Simplest way to create the necessary Java class is to extend GenericService.\n\n\n{% codeblock HelloWorldComponent.java lang:java  %}\npackage com.buddha.components;\n\nimport atg.nucleus.GenericService;\nimport atg.nucleus.ServiceException;\n\npublic class HelloWorldComponent extends GenericService {\n\n    public String firstStr = \"Dummy Value\";\n\n    public String getFirstStr() {\n        return firstStr;\n    }\n\n    public void setFirstStr(String firstStr) {\n        this.firstStr = firstStr;\n    }\n\n    @Override\n    public void doStartService() throws ServiceException {\n        super.doStartService();\n        System.out.println(\"Hello ATG Component!\");\n    }\n\n    @Override\n    public void doStopService() throws ServiceException {\n        super.doStopService();\n        System.out.println(\"Hello ATG Component! Stops now!\");\n    }\n}\n{% endcodeblock %}\n\n## Step 3: Create the properties file\n\nThe Properties file must be providing the values to the properties in the component. This initialises the bean. `$class` property will link the property file with the class file we have created in previous step. Location of the propety file decides the path of the component instead of the java class. Follow the example below to create the property file.\n\n{% codeblock HelloWorldComponent.properties lang:java  %}\n$class=com.buddha.components.HelloWorldComponent\nfirstStr=HelloWorld\n{% endcodeblock %}\n\nMultiple components can be created from the same class file. A different properties file can have same `$class` but initialise firstStr to a different value. This creates a different component.\n\n## Step 4: Create a Manifest file\n\nManifest files is like a configuration for the module. What all are its dependencies when it is running in webserver, where are the compiled classes placed etc.,\n\n{% codeblock Manifest.MF  %}\nManifest-Version: 1.0\nATG-Required: DafEar.Admin\nATG-Config-Path: config/\nATG-Class-Path: ./bin/\n{% endcodeblock %}\n## Step 5: Build & Deploy\nBuild the project and copy the project folder into ${DYNAMO_ROOT} and run the following command to generate an ear file of your project and deploy it in your jboss server. No need to generate any ear file if you are running it on Tomcat. Just start the respective server with the given module.\n\n```\nrunAssembler.bat -jboss HelloWorld.ear -m EXP_HelloATGComponentWorld\n```\n## Step 6: Access the Component\n\nNavigate to Dyn/Admin and search for the component HelloWorldComponent and click on the component listed in the search results.\n\n![Search Results in DynAdmin](http://i.stack.imgur.com/urvDL.png)\n\nClick on it to go to the component page to see the property we have created and its value given in properties file.\n\n![Component & the property we have created earlier](http://i.stack.imgur.com/sWi9t.png)\n\nYou can see the server log to find a line similar to this.\n\n```\nINFO  [stdout] /dyn/admin/nucleus//com/buddha/components/HelloWorldComponent Hello ATG Component!\n.....\nINFO  [stdout] /dyn/admin/nucleus//com/buddha/components/HelloWorldComponent Hello ATG Component! Stops now!\n```\nThis line is generated because of the sysout in our doStartService(); You can also give other methods that can be called through dyn/admin or interact with other components. However in production, avoid using System.out.println, instead use loggingDebug or loggingInfo. Best of Luck.\n\n----\n\nHere is an interesting non-technical blog post that I came across recently: [Reading a book vs Watching a Movie Adaption](https://unfurledpages.wordpress.com/2016/03/21/turning-pages-or-tuning-channels/) \n","slug":"2016/03/hello-world-for-oracle-commerce","published":1,"updated":"2016-04-29T06:17:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciplf69im0002ouyg0xxl37xe","content":"<p>There are so many concepts in Oracle Commerce (previously known as ATG), that makes coming up with Hello World program little difficult. Do you mean to create one JSP page and deploy it like commerce reference store? Do you want to create a component just to see in Dyn/Admin? Do you want to create a hello world repository? Depending on what you want to do, the approach to take will be different.<br><img src=\"https://farm2.staticflickr.com/1633/25195316629_65c8162a37_n.jpg\" alt=\"Too many options to begin with\"><br>To work with Oracle Commerce, you don’t have to know about persisting data in database. If you approach Oracle Commerce programming with J2EE &amp; MVC experience, you may find it little difficult to cope with it unless you start with a fresh mind, because things are very different in this platform.</p>\n<p>Today, I will demonstrate how to create a simple component so that it can be viewed in Dyn/Admin. Let us assume that you are trying to create it in your own module instead of existing module like DAS or DAF. Follow the the steps shown below.</p>\n<h2 id=\"Step-1-Create-an-Eclipse-project\"><a href=\"#Step-1-Create-an-Eclipse-project\" class=\"headerlink\" title=\"Step 1: Create an Eclipse project\"></a>Step 1: Create an Eclipse project</h2><p>Create an Eclipse project and make sure you add all the necessary class files to the build path. Add classes.jar or DAS at the least.<br><a id=\"more\"></a><br><img src=\"http://i.stack.imgur.com/OP8b7.png\" alt=\"Sample Eclipse Project Structure\"></p>\n<h2 id=\"Step-2-Create-the-Java-Class\"><a href=\"#Step-2-Create-the-Java-Class\" class=\"headerlink\" title=\"Step 2: Create the Java Class\"></a>Step 2: Create the Java Class</h2><p>A component in Oracle Commerce is combination of two files. A Java Class and a Properties File. The Java class can be a simple bean or can be a service that performs several tasks based on a schedule. Simplest way to create the necessary Java class is to extend GenericService.</p>\n<figure class=\"highlight java\"><figcaption><span>HelloWorldComponent.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.buddha.components;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> atg.nucleus.GenericService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> atg.nucleus.ServiceException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">GenericService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstStr = <span class=\"string\">\"Dummy Value\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFirstStr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFirstStr</span><span class=\"params\">(String firstStr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.firstStr = firstStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doStartService</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ServiceException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.doStartService();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello ATG Component!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doStopService</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ServiceException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.doStopService();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello ATG Component! Stops now!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-3-Create-the-properties-file\"><a href=\"#Step-3-Create-the-properties-file\" class=\"headerlink\" title=\"Step 3: Create the properties file\"></a>Step 3: Create the properties file</h2><p>The Properties file must be providing the values to the properties in the component. This initialises the bean. <code>$class</code> property will link the property file with the class file we have created in previous step. Location of the propety file decides the path of the component instead of the java class. Follow the example below to create the property file.</p>\n<figure class=\"highlight java\"><figcaption><span>HelloWorldComponent.properties</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"class\"><span class=\"keyword\">class</span></span>=com.buddha.components.HelloWorldComponent</span><br><span class=\"line\">firstStr=HelloWorld</span><br></pre></td></tr></table></figure>\n<p>Multiple components can be created from the same class file. A different properties file can have same <code>$class</code> but initialise firstStr to a different value. This creates a different component.</p>\n<h2 id=\"Step-4-Create-a-Manifest-file\"><a href=\"#Step-4-Create-a-Manifest-file\" class=\"headerlink\" title=\"Step 4: Create a Manifest file\"></a>Step 4: Create a Manifest file</h2><p>Manifest files is like a configuration for the module. What all are its dependencies when it is running in webserver, where are the compiled classes placed etc.,</p>\n<figure class=\"highlight plain\"><figcaption><span>Manifest.MF</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">ATG-Required: DafEar.Admin</span><br><span class=\"line\">ATG-Config-Path: config/</span><br><span class=\"line\">ATG-Class-Path: ./bin/</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-5-Build-amp-Deploy\"><a href=\"#Step-5-Build-amp-Deploy\" class=\"headerlink\" title=\"Step 5: Build &amp; Deploy\"></a>Step 5: Build &amp; Deploy</h2><p>Build the project and copy the project folder into ${DYNAMO_ROOT} and run the following command to generate an ear file of your project and deploy it in your jboss server. No need to generate any ear file if you are running it on Tomcat. Just start the respective server with the given module.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runAssembler.bat -jboss HelloWorld.ear -m EXP_HelloATGComponentWorld</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-6-Access-the-Component\"><a href=\"#Step-6-Access-the-Component\" class=\"headerlink\" title=\"Step 6: Access the Component\"></a>Step 6: Access the Component</h2><p>Navigate to Dyn/Admin and search for the component HelloWorldComponent and click on the component listed in the search results.</p>\n<p><img src=\"http://i.stack.imgur.com/urvDL.png\" alt=\"Search Results in DynAdmin\"></p>\n<p>Click on it to go to the component page to see the property we have created and its value given in properties file.</p>\n<p><img src=\"http://i.stack.imgur.com/sWi9t.png\" alt=\"Component &amp; the property we have created earlier\"></p>\n<p>You can see the server log to find a line similar to this.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  [stdout] /dyn/admin/nucleus//com/buddha/components/HelloWorldComponent Hello ATG Component!</span><br><span class=\"line\">.....</span><br><span class=\"line\">INFO  [stdout] /dyn/admin/nucleus//com/buddha/components/HelloWorldComponent Hello ATG Component! Stops now!</span><br></pre></td></tr></table></figure>\n<p>This line is generated because of the sysout in our doStartService(); You can also give other methods that can be called through dyn/admin or interact with other components. However in production, avoid using System.out.println, instead use loggingDebug or loggingInfo. Best of Luck.</p>\n<hr>\n<p>Here is an interesting non-technical blog post that I came across recently: <a href=\"https://unfurledpages.wordpress.com/2016/03/21/turning-pages-or-tuning-channels/\" target=\"_blank\" rel=\"external\">Reading a book vs Watching a Movie Adaption</a> </p>\n","excerpt":"<p>There are so many concepts in Oracle Commerce (previously known as ATG), that makes coming up with Hello World program little difficult. Do you mean to create one JSP page and deploy it like commerce reference store? Do you want to create a component just to see in Dyn/Admin? Do you want to create a hello world repository? Depending on what you want to do, the approach to take will be different.<br><img src=\"https://farm2.staticflickr.com/1633/25195316629_65c8162a37_n.jpg\" alt=\"Too many options to begin with\"><br>To work with Oracle Commerce, you don’t have to know about persisting data in database. If you approach Oracle Commerce programming with J2EE &amp; MVC experience, you may find it little difficult to cope with it unless you start with a fresh mind, because things are very different in this platform.</p>\n<p>Today, I will demonstrate how to create a simple component so that it can be viewed in Dyn/Admin. Let us assume that you are trying to create it in your own module instead of existing module like DAS or DAF. Follow the the steps shown below.</p>\n<h2 id=\"Step-1-Create-an-Eclipse-project\"><a href=\"#Step-1-Create-an-Eclipse-project\" class=\"headerlink\" title=\"Step 1: Create an Eclipse project\"></a>Step 1: Create an Eclipse project</h2><p>Create an Eclipse project and make sure you add all the necessary class files to the build path. Add classes.jar or DAS at the least.<br>","more":"<br><img src=\"http://i.stack.imgur.com/OP8b7.png\" alt=\"Sample Eclipse Project Structure\"></p>\n<h2 id=\"Step-2-Create-the-Java-Class\"><a href=\"#Step-2-Create-the-Java-Class\" class=\"headerlink\" title=\"Step 2: Create the Java Class\"></a>Step 2: Create the Java Class</h2><p>A component in Oracle Commerce is combination of two files. A Java Class and a Properties File. The Java class can be a simple bean or can be a service that performs several tasks based on a schedule. Simplest way to create the necessary Java class is to extend GenericService.</p>\n<figure class=\"highlight java\"><figcaption><span>HelloWorldComponent.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.buddha.components;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> atg.nucleus.GenericService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> atg.nucleus.ServiceException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">GenericService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstStr = <span class=\"string\">\"Dummy Value\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFirstStr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFirstStr</span><span class=\"params\">(String firstStr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.firstStr = firstStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doStartService</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ServiceException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.doStartService();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello ATG Component!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doStopService</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ServiceException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.doStopService();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello ATG Component! Stops now!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-3-Create-the-properties-file\"><a href=\"#Step-3-Create-the-properties-file\" class=\"headerlink\" title=\"Step 3: Create the properties file\"></a>Step 3: Create the properties file</h2><p>The Properties file must be providing the values to the properties in the component. This initialises the bean. <code>$class</code> property will link the property file with the class file we have created in previous step. Location of the propety file decides the path of the component instead of the java class. Follow the example below to create the property file.</p>\n<figure class=\"highlight java\"><figcaption><span>HelloWorldComponent.properties</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"class\"><span class=\"keyword\">class</span></span>=com.buddha.components.HelloWorldComponent</span><br><span class=\"line\">firstStr=HelloWorld</span><br></pre></td></tr></table></figure>\n<p>Multiple components can be created from the same class file. A different properties file can have same <code>$class</code> but initialise firstStr to a different value. This creates a different component.</p>\n<h2 id=\"Step-4-Create-a-Manifest-file\"><a href=\"#Step-4-Create-a-Manifest-file\" class=\"headerlink\" title=\"Step 4: Create a Manifest file\"></a>Step 4: Create a Manifest file</h2><p>Manifest files is like a configuration for the module. What all are its dependencies when it is running in webserver, where are the compiled classes placed etc.,</p>\n<figure class=\"highlight plain\"><figcaption><span>Manifest.MF</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">ATG-Required: DafEar.Admin</span><br><span class=\"line\">ATG-Config-Path: config/</span><br><span class=\"line\">ATG-Class-Path: ./bin/</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-5-Build-amp-Deploy\"><a href=\"#Step-5-Build-amp-Deploy\" class=\"headerlink\" title=\"Step 5: Build &amp; Deploy\"></a>Step 5: Build &amp; Deploy</h2><p>Build the project and copy the project folder into ${DYNAMO_ROOT} and run the following command to generate an ear file of your project and deploy it in your jboss server. No need to generate any ear file if you are running it on Tomcat. Just start the respective server with the given module.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runAssembler.bat -jboss HelloWorld.ear -m EXP_HelloATGComponentWorld</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-6-Access-the-Component\"><a href=\"#Step-6-Access-the-Component\" class=\"headerlink\" title=\"Step 6: Access the Component\"></a>Step 6: Access the Component</h2><p>Navigate to Dyn/Admin and search for the component HelloWorldComponent and click on the component listed in the search results.</p>\n<p><img src=\"http://i.stack.imgur.com/urvDL.png\" alt=\"Search Results in DynAdmin\"></p>\n<p>Click on it to go to the component page to see the property we have created and its value given in properties file.</p>\n<p><img src=\"http://i.stack.imgur.com/sWi9t.png\" alt=\"Component &amp; the property we have created earlier\"></p>\n<p>You can see the server log to find a line similar to this.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  [stdout] /dyn/admin/nucleus//com/buddha/components/HelloWorldComponent Hello ATG Component!</span><br><span class=\"line\">.....</span><br><span class=\"line\">INFO  [stdout] /dyn/admin/nucleus//com/buddha/components/HelloWorldComponent Hello ATG Component! Stops now!</span><br></pre></td></tr></table></figure>\n<p>This line is generated because of the sysout in our doStartService(); You can also give other methods that can be called through dyn/admin or interact with other components. However in production, avoid using System.out.println, instead use loggingDebug or loggingInfo. Best of Luck.</p>\n<hr>\n<p>Here is an interesting non-technical blog post that I came across recently: <a href=\"https://unfurledpages.wordpress.com/2016/03/21/turning-pages-or-tuning-channels/\">Reading a book vs Watching a Movie Adaption</a> </p>"},{"title":"Disable DynAdmin authentication of Oracle Commerce","date":"2016-03-31T18:30:00.000Z","author":"Buddha","description":"Couple of handy dandy tricks for bypassing the authentication mechanism of Dyn Admin for a quick opening of it.","_content":"We use Dyn/Admin for many of the development related tasks of Oracle Commerce(ATG). However, the log-in ticket expires too frequently forcing us to enter credentials repeatedly. Some times we will also have to give both application server(weblogic/jboss) credentials and dynamo administration credentials. As we are not in a production critical environment where multiple people may access our DynAdmin and create issues, it is not necessary to have this security check every time we try to open DynAdmin of our development environment. I have found following solutions to be free of this issue. This can come in handy when we are doing active development and have to frequently access dynamo administration.\n\n## Solution 1 - Enable lazyAthentication\nThis approach works by enabling Lazy Athentication which means login will only be asked once per session. This means, as long as the session is not expired, dyn/admin will not ask for credentials again. <!-- more -->I have observed that this means a very long time. Sometimes even the the authentication credentials are not asked after restarting the server. Follow the below steps to enable lazyAthentication.\n1. Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo\n1. Create a folder named servlet if it doesn't already exist\n1. Create a folder named adminpipeline inside servlet folder if it doesn't already exist\n1. Create a properties files with the name Authenticator.properties with below content in it and restart the server.\n\n{% codeblock atg/dynamo/servlet/adminpipeline/Authenticator.properties lang:java %}\n$class=atg.servlet.pipeline.UserAuthorityAuthenticator\n$scope=global\nlazyAthentication=true\n{% endcodeblock %}\n\n## Solution 2 - Disable AuthenticationServlet\nFirst solution provides respite from entering DynAdmin credentials frequently, however we still have to enter it once per session. Here is a better approach, my personal favourite. If we would like to disable the authentication for much longer period, we can disable authentication altogether, it can be acheived by disabling AuthenticationServlet component. Below approach can be followed for achieving that.\n1. Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo\n1. Create a folder named servlet if it doesn't already exist\n1. Create a folder named adminpipeline inside servlet folder if it doesn't already exist\n1. Create a properties files with the name AuthenticationServlet.properties with below content in it and restart the server.\n\n{% codeblock atg/dynamo/servlet/adminpipeline/AuthenticationServlet.properties  lang:java %}\n$class=atg.servlet.pipeline.BasicAuthenticationPipelineServlet\nenabled=false\n{% endcodeblock %}\n\nAuthentication can be enabled again by changing enabled=true in AuthenticationServlet.properties.\n\n{% admonition warning Watchout %}\nIt is a good idea to disable lazyAthentication and enable AuthenticationServlet component when testing some authentication related tests. Neither of the approaches have been tested with LDAP or other authentication mechanisms.\n{% endadmonition %}\n","source":"_posts/2016/04/disable-dynadmin-auth-dev-env-oracle-commerce.md","raw":"---\ntitle: Disable DynAdmin authentication of Oracle Commerce\ndate: 2016-04-01\ntags: ['atg', 'configuration', 'oraclecommerce', 'hack']\nauthor: Buddha\ndescription: Couple of handy dandy tricks for bypassing the authentication mechanism of Dyn Admin for a quick opening of it.\n---\nWe use Dyn/Admin for many of the development related tasks of Oracle Commerce(ATG). However, the log-in ticket expires too frequently forcing us to enter credentials repeatedly. Some times we will also have to give both application server(weblogic/jboss) credentials and dynamo administration credentials. As we are not in a production critical environment where multiple people may access our DynAdmin and create issues, it is not necessary to have this security check every time we try to open DynAdmin of our development environment. I have found following solutions to be free of this issue. This can come in handy when we are doing active development and have to frequently access dynamo administration.\n\n## Solution 1 - Enable lazyAthentication\nThis approach works by enabling Lazy Athentication which means login will only be asked once per session. This means, as long as the session is not expired, dyn/admin will not ask for credentials again. <!-- more -->I have observed that this means a very long time. Sometimes even the the authentication credentials are not asked after restarting the server. Follow the below steps to enable lazyAthentication.\n1. Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo\n1. Create a folder named servlet if it doesn't already exist\n1. Create a folder named adminpipeline inside servlet folder if it doesn't already exist\n1. Create a properties files with the name Authenticator.properties with below content in it and restart the server.\n\n{% codeblock atg/dynamo/servlet/adminpipeline/Authenticator.properties lang:java %}\n$class=atg.servlet.pipeline.UserAuthorityAuthenticator\n$scope=global\nlazyAthentication=true\n{% endcodeblock %}\n\n## Solution 2 - Disable AuthenticationServlet\nFirst solution provides respite from entering DynAdmin credentials frequently, however we still have to enter it once per session. Here is a better approach, my personal favourite. If we would like to disable the authentication for much longer period, we can disable authentication altogether, it can be acheived by disabling AuthenticationServlet component. Below approach can be followed for achieving that.\n1. Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo\n1. Create a folder named servlet if it doesn't already exist\n1. Create a folder named adminpipeline inside servlet folder if it doesn't already exist\n1. Create a properties files with the name AuthenticationServlet.properties with below content in it and restart the server.\n\n{% codeblock atg/dynamo/servlet/adminpipeline/AuthenticationServlet.properties  lang:java %}\n$class=atg.servlet.pipeline.BasicAuthenticationPipelineServlet\nenabled=false\n{% endcodeblock %}\n\nAuthentication can be enabled again by changing enabled=true in AuthenticationServlet.properties.\n\n{% admonition warning Watchout %}\nIt is a good idea to disable lazyAthentication and enable AuthenticationServlet component when testing some authentication related tests. Neither of the approaches have been tested with LDAP or other authentication mechanisms.\n{% endadmonition %}\n","slug":"2016/04/disable-dynadmin-auth-dev-env-oracle-commerce","published":1,"updated":"2016-04-29T06:17:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciplf69j60003ouygqj5q4j1i","content":"<p>We use Dyn/Admin for many of the development related tasks of Oracle Commerce(ATG). However, the log-in ticket expires too frequently forcing us to enter credentials repeatedly. Some times we will also have to give both application server(weblogic/jboss) credentials and dynamo administration credentials. As we are not in a production critical environment where multiple people may access our DynAdmin and create issues, it is not necessary to have this security check every time we try to open DynAdmin of our development environment. I have found following solutions to be free of this issue. This can come in handy when we are doing active development and have to frequently access dynamo administration.</p>\n<h2 id=\"Solution-1-Enable-lazyAthentication\"><a href=\"#Solution-1-Enable-lazyAthentication\" class=\"headerlink\" title=\"Solution 1 - Enable lazyAthentication\"></a>Solution 1 - Enable lazyAthentication</h2><p>This approach works by enabling Lazy Athentication which means login will only be asked once per session. This means, as long as the session is not expired, dyn/admin will not ask for credentials again. <a id=\"more\"></a>I have observed that this means a very long time. Sometimes even the the authentication credentials are not asked after restarting the server. Follow the below steps to enable lazyAthentication.</p>\n<ol>\n<li>Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo</li>\n<li>Create a folder named servlet if it doesn’t already exist</li>\n<li>Create a folder named adminpipeline inside servlet folder if it doesn’t already exist</li>\n<li>Create a properties files with the name Authenticator.properties with below content in it and restart the server.</li>\n</ol>\n<figure class=\"highlight java\"><figcaption><span>atg/dynamo/servlet/adminpipeline/Authenticator.properties</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"class\"><span class=\"keyword\">class</span></span>=atg.servlet.pipeline.UserAuthorityAuthenticator</span><br><span class=\"line\">$scope=global</span><br><span class=\"line\">lazyAthentication=<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Solution-2-Disable-AuthenticationServlet\"><a href=\"#Solution-2-Disable-AuthenticationServlet\" class=\"headerlink\" title=\"Solution 2 - Disable AuthenticationServlet\"></a>Solution 2 - Disable AuthenticationServlet</h2><p>First solution provides respite from entering DynAdmin credentials frequently, however we still have to enter it once per session. Here is a better approach, my personal favourite. If we would like to disable the authentication for much longer period, we can disable authentication altogether, it can be acheived by disabling AuthenticationServlet component. Below approach can be followed for achieving that.</p>\n<ol>\n<li>Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo</li>\n<li>Create a folder named servlet if it doesn’t already exist</li>\n<li>Create a folder named adminpipeline inside servlet folder if it doesn’t already exist</li>\n<li>Create a properties files with the name AuthenticationServlet.properties with below content in it and restart the server.</li>\n</ol>\n<figure class=\"highlight java\"><figcaption><span>atg/dynamo/servlet/adminpipeline/AuthenticationServlet.properties</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"class\"><span class=\"keyword\">class</span></span>=atg.servlet.pipeline.BasicAuthenticationPipelineServlet</span><br><span class=\"line\">enabled=<span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n<p>Authentication can be enabled again by changing enabled=true in AuthenticationServlet.properties.</p>\n<div class=\"admonition warning\"><p class=\"admonition-title\">Watchout</p><p>It is a good idea to disable lazyAthentication and enable AuthenticationServlet component when testing some authentication related tests. Neither of the approaches have been tested with LDAP or other authentication mechanisms.</p></div>\n","excerpt":"<p>We use Dyn/Admin for many of the development related tasks of Oracle Commerce(ATG). However, the log-in ticket expires too frequently forcing us to enter credentials repeatedly. Some times we will also have to give both application server(weblogic/jboss) credentials and dynamo administration credentials. As we are not in a production critical environment where multiple people may access our DynAdmin and create issues, it is not necessary to have this security check every time we try to open DynAdmin of our development environment. I have found following solutions to be free of this issue. This can come in handy when we are doing active development and have to frequently access dynamo administration.</p>\n<h2 id=\"Solution-1-Enable-lazyAthentication\"><a href=\"#Solution-1-Enable-lazyAthentication\" class=\"headerlink\" title=\"Solution 1 - Enable lazyAthentication\"></a>Solution 1 - Enable lazyAthentication</h2><p>This approach works by enabling Lazy Athentication which means login will only be asked once per session. This means, as long as the session is not expired, dyn/admin will not ask for credentials again.","more":"I have observed that this means a very long time. Sometimes even the the authentication credentials are not asked after restarting the server. Follow the below steps to enable lazyAthentication.</p>\n<ol>\n<li>Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo</li>\n<li>Create a folder named servlet if it doesn’t already exist</li>\n<li>Create a folder named adminpipeline inside servlet folder if it doesn’t already exist</li>\n<li>Create a properties files with the name Authenticator.properties with below content in it and restart the server.</li>\n</ol>\n<figure class=\"highlight java\"><figcaption><span>atg/dynamo/servlet/adminpipeline/Authenticator.properties</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"class\"><span class=\"keyword\">class</span></span>=atg.servlet.pipeline.UserAuthorityAuthenticator</span><br><span class=\"line\">$scope=global</span><br><span class=\"line\">lazyAthentication=<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Solution-2-Disable-AuthenticationServlet\"><a href=\"#Solution-2-Disable-AuthenticationServlet\" class=\"headerlink\" title=\"Solution 2 - Disable AuthenticationServlet\"></a>Solution 2 - Disable AuthenticationServlet</h2><p>First solution provides respite from entering DynAdmin credentials frequently, however we still have to enter it once per session. Here is a better approach, my personal favourite. If we would like to disable the authentication for much longer period, we can disable authentication altogether, it can be acheived by disabling AuthenticationServlet component. Below approach can be followed for achieving that.</p>\n<ol>\n<li>Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo</li>\n<li>Create a folder named servlet if it doesn’t already exist</li>\n<li>Create a folder named adminpipeline inside servlet folder if it doesn’t already exist</li>\n<li>Create a properties files with the name AuthenticationServlet.properties with below content in it and restart the server.</li>\n</ol>\n<figure class=\"highlight java\"><figcaption><span>atg/dynamo/servlet/adminpipeline/AuthenticationServlet.properties</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"class\"><span class=\"keyword\">class</span></span>=atg.servlet.pipeline.BasicAuthenticationPipelineServlet</span><br><span class=\"line\">enabled=<span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n<p>Authentication can be enabled again by changing enabled=true in AuthenticationServlet.properties.</p>\n<div class=\"admonition warning\"><p class=\"admonition-title\">Watchout</p><p>It is a good idea to disable lazyAthentication and enable AuthenticationServlet component when testing some authentication related tests. Neither of the approaches have been tested with LDAP or other authentication mechanisms.</p></div>"},{"title":"Restricting an ojInputText to accept only numbers","date":"2016-04-21T18:30:00.000Z","author":"Buddha","description":"If you have used ojInputText of Oracle Jet framework. You might have observed that it doesn't provide any way to restrict input, here is a solution that simply removes any non numeric characters if entered.","_content":"Oracle Jet is a beautiful toolkit for simplifying lot of tasks. ojInputText is a basic editor the framework provides, it can validate the text entered based on the regular expression we give, but validation only happens on blur and if we simply want to filter any keystrokes that don't match that, we can't do it by default.\n\nHere is the result before we go and learn how to do it.\n{% codepen mErVGe 'Allow only numbers in OjInputText' result wait %}\n\nOfcourse we can use ojInputNumber and use the example they gave for eating non-numbers, but what if we don't want the increment and decrement the arrows of ojInputNumber. One way to do it is to bind a keyUp event and check everytime a character is pressed. Infact this is the approach that is used for the example given in OracleJet cookbook.\n\nHere is an alternative approach using ojInputText. Instead of bindng to value, we can bind to rawValue attribute. This ensures that the observable gets updated on every keystroke. <!-- more -->To acheive the result, I have created a helper observable which is a computed observable depending on the value of text box. Whenever a new key is pressed, the computation of helper observable takes place. Here, I used simple javascript regex method to cleanup. Once the cleanup is done, I'm updating the original input text if the value has changed, otherwise I'm leaving it alone. See the below Pen, if you want to see the code and the ojInputText in action.\n\n{% codepen mErVGe 'Allow only numbers in OjInputText' html %}\n","source":"_posts/2016/04/restricting-ojinputtext-for-numericals.md","raw":"---\ntitle: Restricting an ojInputText to accept only numbers\ndate: 2016-04-22\ntags: ['oraclejet', 'javascript', 'html']\nauthor: Buddha\ndescription: If you have used ojInputText of Oracle Jet framework. You might have observed that it doesn't provide any way to restrict input, here is a solution that simply removes any non numeric characters if entered.\n---\nOracle Jet is a beautiful toolkit for simplifying lot of tasks. ojInputText is a basic editor the framework provides, it can validate the text entered based on the regular expression we give, but validation only happens on blur and if we simply want to filter any keystrokes that don't match that, we can't do it by default.\n\nHere is the result before we go and learn how to do it.\n{% codepen mErVGe 'Allow only numbers in OjInputText' result wait %}\n\nOfcourse we can use ojInputNumber and use the example they gave for eating non-numbers, but what if we don't want the increment and decrement the arrows of ojInputNumber. One way to do it is to bind a keyUp event and check everytime a character is pressed. Infact this is the approach that is used for the example given in OracleJet cookbook.\n\nHere is an alternative approach using ojInputText. Instead of bindng to value, we can bind to rawValue attribute. This ensures that the observable gets updated on every keystroke. <!-- more -->To acheive the result, I have created a helper observable which is a computed observable depending on the value of text box. Whenever a new key is pressed, the computation of helper observable takes place. Here, I used simple javascript regex method to cleanup. Once the cleanup is done, I'm updating the original input text if the value has changed, otherwise I'm leaving it alone. See the below Pen, if you want to see the code and the ojInputText in action.\n\n{% codepen mErVGe 'Allow only numbers in OjInputText' html %}\n","slug":"2016/04/restricting-ojinputtext-for-numericals","published":1,"updated":"2016-06-18T13:49:18.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciplf69ka0005ouygdqwr1w4v","content":"<p>Oracle Jet is a beautiful toolkit for simplifying lot of tasks. ojInputText is a basic editor the framework provides, it can validate the text entered based on the regular expression we give, but validation only happens on blur and if we simply want to filter any keystrokes that don’t match that, we can’t do it by default.</p>\n<p>Here is the result before we go and learn how to do it.<br></p><p data-height=\"350\" data-theme-id=\"0\" data-slug-hash=\"mErVGe\" data-default-tab=\"result\" data-user=\"jbuddha\" data-embed-version=\"2\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/jbuddha/pen/mErVGe/\" target=\"_blank\" rel=\"external\">Allow only numbers in OjInputText</a> by Buddha (<a href=\"http://codepen.io/jbuddha\" target=\"_blank\" rel=\"external\">@jbuddha</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.</p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script><p></p>\n<p>Ofcourse we can use ojInputNumber and use the example they gave for eating non-numbers, but what if we don’t want the increment and decrement the arrows of ojInputNumber. One way to do it is to bind a keyUp event and check everytime a character is pressed. Infact this is the approach that is used for the example given in OracleJet cookbook.</p>\n<p>Here is an alternative approach using ojInputText. Instead of bindng to value, we can bind to rawValue attribute. This ensures that the observable gets updated on every keystroke. <a id=\"more\"></a>To acheive the result, I have created a helper observable which is a computed observable depending on the value of text box. Whenever a new key is pressed, the computation of helper observable takes place. Here, I used simple javascript regex method to cleanup. Once the cleanup is done, I’m updating the original input text if the value has changed, otherwise I’m leaving it alone. See the below Pen, if you want to see the code and the ojInputText in action.</p>\n<p data-height=\"350\" data-theme-id=\"0\" data-slug-hash=\"mErVGe\" data-default-tab=\"html\" data-user=\"jbuddha\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/jbuddha/pen/mErVGe/\" target=\"_blank\" rel=\"external\">Allow only numbers in OjInputText</a> by Buddha (<a href=\"http://codepen.io/jbuddha\" target=\"_blank\" rel=\"external\">@jbuddha</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.</p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n","excerpt":"<p>Oracle Jet is a beautiful toolkit for simplifying lot of tasks. ojInputText is a basic editor the framework provides, it can validate the text entered based on the regular expression we give, but validation only happens on blur and if we simply want to filter any keystrokes that don’t match that, we can’t do it by default.</p>\n<p>Here is the result before we go and learn how to do it.<br><p data-height=\"350\" data-theme-id=\"0\" data-slug-hash=\"mErVGe\" data-default-tab=\"result\" data-user=\"jbuddha\" data-embed-version=\"2\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/jbuddha/pen/mErVGe/\">Allow only numbers in OjInputText</a> by Buddha (<a href=\"http://codepen.io/jbuddha\">@jbuddha</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>Ofcourse we can use ojInputNumber and use the example they gave for eating non-numbers, but what if we don’t want the increment and decrement the arrows of ojInputNumber. One way to do it is to bind a keyUp event and check everytime a character is pressed. Infact this is the approach that is used for the example given in OracleJet cookbook.</p>\n<p>Here is an alternative approach using ojInputText. Instead of bindng to value, we can bind to rawValue attribute. This ensures that the observable gets updated on every keystroke.","more":"To acheive the result, I have created a helper observable which is a computed observable depending on the value of text box. Whenever a new key is pressed, the computation of helper observable takes place. Here, I used simple javascript regex method to cleanup. Once the cleanup is done, I’m updating the original input text if the value has changed, otherwise I’m leaving it alone. See the below Pen, if you want to see the code and the ojInputText in action.</p>\n<p data-height=\"350\" data-theme-id=\"0\" data-slug-hash=\"mErVGe\" data-default-tab=\"html\" data-user=\"jbuddha\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/jbuddha/pen/mErVGe/\">Allow only numbers in OjInputText</a> by Buddha (<a href=\"http://codepen.io/jbuddha\">@jbuddha</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>"},{"title":"Generating the Jam Coins","date":"2016-04-11T18:30:00.000Z","author":"Buddha","description":"Jam Coins is an interesting problem which gives a glimpse into another popular virtual currency, bit coin mining. Here, I'm going to show you how to solve both small as well as large datasets within time limit.","sourcecode":"https://github.com/jbuddha/competitions/blob/master/codejam/src/year2016/JamCoins.java","sourcetype":"g","_content":"![The Problem](https://farm2.staticflickr.com/1638/25470220981_c6d315ac60_m.jpg)\n## The Problem\n\nHere is a moderate problem of CodeJam's qualification round of 2016. The Jam Coins. Here is the description of the problem. You need to generate jamcoins of either 16 digits for small dataset or 32 digits for large datasets. Jam Coins follow the given rules...\n1. A Jam Coin is only made up of 1's & 0's of the required number of digits.\n1. It begins and ends with 1.\n1. If that interpreted from base 2 to base 10, it should not be a prime number in any of them.\n\nFor Small dataset, you need to generate 50 jam coins of 16 digits and for large dataset, you need to generate 500 jam coins of 32 digits following above rules.\n<!-- more -->\nOutput should be the list of Jam Coins where each is followed by a divisor of that number in each base.\n\nLet us say that we want to test if `11001101` is a jam coin or not.\n\nIf we assume that the number is in base 2, it's decimal equivalent is 2^7+2^6+2^3+2^2+1 = 205 => Not a prime number => Divisible by 5\nIf we assume that the number is in base 3, it's decimal equivalent is 3^7+3^6+3^3+3^2+1 = 2953 => Prime Number => Hence not a jam coin\n\nLet us test `1010101`\n\n{% raw %}\n<div style=\"width: 50%;\">\n{% endraw %}\n\n|Base|Decimal Equivalent|Divisior|\n|-|-|-|\n|2| 85      |5 |\n|3| 820     |2|\n|4| 4369    |17|\n|5| 16276   |2|\n|6| 47989   |37|\n|7| 120100  |2|\n|8| 266305  |5|\n|9| 538084  |2|\n|10|1010101 |73|\n\n{% raw %}\n</div>\n{% endraw %}\n\nIt is divisible by some or number in all bases from 2 to 10. Hence it is a Jam Coin. We need to generate such coins with given number of digits.\n\nHence this can be included in output as below if the input is `7 10`\n\n```\nCase #1:\n1000001 5 2 17 2 13 2 5 2 101\n1001011 3 2 5 2 7 2 3 2 11\n1010101 5 2 17 2 37 2 5 2 73\n1011101 3 7 11 3 5 43 3 11 7\n1011111 5 2 3 2 37 2 5 2 3\n1100011 3 2 5 2 7 2 3 2 11\n1101001 3 2 5 2 7 2 3 2 11\n1101111 3 2 3 2 7 2 3 2 3\n1110111 7 2 3 2 43 2 17 2 3\n1111011 3 2 3 2 7 2 3 2 3\n```\n\n## My solution\n![Let us take a closer look](https://farm2.staticflickr.com/1561/25195430059_5a59d15b1a_n.jpg)\nLet us begin with breaking the problem into manageable chunks before we try to solve it.\n\n{% codeblock Solution Pseudo Code  %}\nGenerate a number with required number of digits\n    - Convert it to decimal assuming it is base 2\n    - Test if it is a prime number\n    - If it is a prime number, go to step 1 else continue\n    - Convert it to decimal assuming it is base 3\n    - Test if it is a prime number\n    - If it is a prime number, go to step 1 else continue\n    - .... repeat till you reach base 10\nFind Divisors in each base\nPrint the number\nPrint all divisors\n{% endcodeblock %}\n\nThere are several complex problems inside the deceptively simple pseudocode\n\n1. Handle large numbers. 16 digits are way too big for a long datatype.\n1. Generate a number of required digits of 1's & 0's\n2. Convert the number to decimal from given base\n3. Testing if it is prime number\n4. Finding a divisor\n\nLet us solve them one by one\n\n##### [1/5]Handling insanely large numbers\nIt depends on the programming language of your choice. For this solution, I have chosen Java, which has java.math.BigInteger class that can store numbers and provides a very useful methods for prime number calculations. Example usage is as below.\n{% codeblock HelloWorldComponent.java lang:java  %}\nBigInteger num = new BigInteger(\"101010110000011\");\nnum.nextProbablePrime();\nnum.isProbablePrime(10);\nnum = new BigInteger(\"100001\",3);   // converts 100001 to base 10 from base 3\nnum.toString(2);                    // converts the num to base 2 from base 10\n{% endcodeblock %}\n\n##### [2/5]Generating combination of 1s and 0s that begin and end with 1\nFollowing is the algorithm I followed.\n1. Generate a string of zeroes of size n-2, assuming n is the length required\n1. Append 1 before and after the string of zeroes\n1. To Generate another number, imagine the number if in binary, adding two(10 in binary format) will give next odd number. Any number ending with 1 in binary number is an odd number.\n\n```\n100000000001\n           +\n          10\n------------\n100000000011\n           +\n          10\n------------\n100000000101\n\n```\nHow do you add 10 in binary format? Just convert that base 2 number to base 10 and add 2 and convert it back to binary number, which leads us to the following question.\n\n##### [3/5]Convert the number to decimal from given base\n```\nBigInteger incrementInBinaryByTwo(BigInteger num)\n{\n\treturn new BigInteger(new BigInteger(num.toString(),2).add(ONE).add(ONE).toString(2));\n}\n```\nConverting from a decimal number to binary format is as simple as calling toString method with 2 as the parameter.\n\n##### [4/5]Testing if it is a prime number\nBigInteger class of Java provides a nice API to work with prime numbers\n\nBigInteger.isProbablePrime() will return false if it is definately not a prime and returns true, if the probablity for this number to be a prime number is less than 2^-100. Hence for our purpose of finding it is not a prime number this would serve the purpose.\n```\nstatic boolean isComposite(BigInteger num) {\n    for (int base = 2; base < 11; base++) {\n        if (new BigInteger(num.toString(), base).isProbablePrime(10)) {\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n##### [5/5]Finding a divisor\nBigInteger has nextProbablePrime method that returns a prime number after the given number. So, if we use it on a prime number, we can get the next prime number and so on. As we can now get all prime numbers one after the another, we can divide our number with each prime number and return the first divisor. However, going indefinately till all primes are verified is inefficient for this problem. There will be simpler jam coins to mine. So, we will test for first 10000 prime numbers. If it is not divisible by any of it, we ignore that number and continue with next number. Here is the code.\n\n```\nstatic BigInteger findSmallestFactor(BigInteger n) {\n    BigInteger half = sqrt(n);\n    BigInteger factor = new BigInteger(\"2\");\n    int counter = 0;\n    while (factor.compareTo(half) < 0 && !n.mod(factor).equals(BigInteger.ZERO)) {\n        factor = factor.nextProbablePrime();\n        counter++;\n        if (counter == 10000) {\n            break;\n        }\n    }\n    if (!n.mod(factor).equals(BigInteger.ZERO)) {\n        throw new RuntimeException();\n    }\n    return factor;\n}\n```\n\n![Let us put all the pieces together](https://farm2.staticflickr.com/1593/25562936785_01a1831fc9_m.jpg)\n{% codeblock JamCoins.java lang:java  %}\npackage year2016;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport static java.math.BigInteger.ONE;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class JamCoins {\n\n    static List<BigInteger> coins = new ArrayList<>();\n\n    public static void processTest(String test) {\n\n        int size = Integer.parseInt(test.split(\" \")[0]);\n        int count = Integer.parseInt(test.split(\" \")[1]);\n\n        List<BigInteger> jamCoins = new ArrayList<>();\n        String zeroes = \"\";\n        for (int i = 2; i < size; i++) {\n            zeroes += \"0\";\n        }\n\n        BigInteger num = new BigInteger(\"1\" + zeroes + \"1\");\n        String entry = \"\";\n\n        while (num.toString().length() == size && jamCoins.size() < count) {\n            if (isComposite(num)) {\n                try {\n                    entry = num.toString();\n                    for (int base = 2; base < 11; base++) {\n                        entry += \" \" + findSmallestFactor(new BigInteger(num.toString(), base));\n                    }\n                    addOutput(entry);\n                    jamCoins.add(num);\n                } catch (Exception e) {\n                }\n            }\n\n            num = incrementInBinaryByTwo(num);\n        }\n    }\n\n    static BigInteger findSmallestFactor(BigInteger n) {\n        BigInteger half = sqrt(n);\n        BigInteger factor = new BigInteger(\"2\");\n        int counter = 0;\n        while (factor.compareTo(half) < 0 && !n.mod(factor).equals(BigInteger.ZERO)) {\n            factor = factor.nextProbablePrime();\n            counter++;\n            if (counter == 10000) {\n                break;\n            }\n        }\n        if (!n.mod(factor).equals(BigInteger.ZERO)) {\n            throw new RuntimeException();\n        }\n        return factor;\n    }\n\n    static BigInteger sqrt(BigInteger n) {\n        BigInteger div = BigInteger.ZERO.setBit(n.bitLength() / 2);\n        BigInteger div2 = div;\n        while (true) {\n            BigInteger y = div.add(n.divide(div)).shiftRight(1);\n            if (y.equals(div) || y.equals(div2)) {\n                return y;\n            }\n            div2 = div;\n            div = y;\n        }\n    }\n\n    static boolean isComposite(BigInteger num) {\n        for (int base = 2; base < 11; base++) {\n            if (new BigInteger(num.toString(), base).isProbablePrime(10)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    static final int max = 32;\n\n    static BigInteger incrementInBinaryByTwo(BigInteger num) {\n        return new BigInteger(new BigInteger(num.toString(), 2).add(ONE).add(ONE).toString(2));\n    }\n\n    static BigInteger decrementInBinary(BigInteger num) {\n        return new BigInteger(new BigInteger(num.toString(), 2).subtract(ONE).toString(2));\n    }\n\n    // Fixed Code Begins *********\n    private static int count = 0;\n    private static final String INPUT_FILE = \"input.txt\";\n    private static final Path OUTPUT_PATH = Paths.get(\"output.txt\");\n\n    private static final List<String> TESTS = new ArrayList<>();\n    private static final List<String> OUTPUT = new ArrayList<>();\n\n    public static void main(String[] args) throws IOException {\n        OUTPUT.clear();\n        OUTPUT.add(\"Case #1:\");\n        processInputFile();\n        Files.write(OUTPUT_PATH, OUTPUT, Charset.defaultCharset());\n    }\n\n    public static void addOutput(String answer) {\n        int c = OUTPUT.size() + 1;\n        OUTPUT.add(answer);\n    }\n\n    private static void processInputFile() throws IOException {\n        try (BufferedReader br = new BufferedReader(new FileReader(INPUT_FILE))) {\n            String line;\n            count = Integer.parseInt(br.readLine());\n            while ((line = br.readLine()) != null) {\n                processTest(line);\n            }\n        }\n    }\n}\n\n{% endcodeblock %}\n","source":"_posts/2016/04/solving-jam-coins.md","raw":"---\ntitle: Generating the Jam Coins\ndate: 2016-04-12\ntags: ['problems', 'codejam', 'java', 'puzzle', 'competition', 'solution']\nauthor: Buddha\ndescription: Jam Coins is an interesting problem which gives a glimpse into another popular virtual currency, bit coin mining. Here, I'm going to show you how to solve both small as well as large datasets within time limit.\nsourcecode: https://github.com/jbuddha/competitions/blob/master/codejam/src/year2016/JamCoins.java\nsourcetype: g\n---\n![The Problem](https://farm2.staticflickr.com/1638/25470220981_c6d315ac60_m.jpg)\n## The Problem\n\nHere is a moderate problem of CodeJam's qualification round of 2016. The Jam Coins. Here is the description of the problem. You need to generate jamcoins of either 16 digits for small dataset or 32 digits for large datasets. Jam Coins follow the given rules...\n1. A Jam Coin is only made up of 1's & 0's of the required number of digits.\n1. It begins and ends with 1.\n1. If that interpreted from base 2 to base 10, it should not be a prime number in any of them.\n\nFor Small dataset, you need to generate 50 jam coins of 16 digits and for large dataset, you need to generate 500 jam coins of 32 digits following above rules.\n<!-- more -->\nOutput should be the list of Jam Coins where each is followed by a divisor of that number in each base.\n\nLet us say that we want to test if `11001101` is a jam coin or not.\n\nIf we assume that the number is in base 2, it's decimal equivalent is 2^7+2^6+2^3+2^2+1 = 205 => Not a prime number => Divisible by 5\nIf we assume that the number is in base 3, it's decimal equivalent is 3^7+3^6+3^3+3^2+1 = 2953 => Prime Number => Hence not a jam coin\n\nLet us test `1010101`\n\n{% raw %}\n<div style=\"width: 50%;\">\n{% endraw %}\n\n|Base|Decimal Equivalent|Divisior|\n|-|-|-|\n|2| 85      |5 |\n|3| 820     |2|\n|4| 4369    |17|\n|5| 16276   |2|\n|6| 47989   |37|\n|7| 120100  |2|\n|8| 266305  |5|\n|9| 538084  |2|\n|10|1010101 |73|\n\n{% raw %}\n</div>\n{% endraw %}\n\nIt is divisible by some or number in all bases from 2 to 10. Hence it is a Jam Coin. We need to generate such coins with given number of digits.\n\nHence this can be included in output as below if the input is `7 10`\n\n```\nCase #1:\n1000001 5 2 17 2 13 2 5 2 101\n1001011 3 2 5 2 7 2 3 2 11\n1010101 5 2 17 2 37 2 5 2 73\n1011101 3 7 11 3 5 43 3 11 7\n1011111 5 2 3 2 37 2 5 2 3\n1100011 3 2 5 2 7 2 3 2 11\n1101001 3 2 5 2 7 2 3 2 11\n1101111 3 2 3 2 7 2 3 2 3\n1110111 7 2 3 2 43 2 17 2 3\n1111011 3 2 3 2 7 2 3 2 3\n```\n\n## My solution\n![Let us take a closer look](https://farm2.staticflickr.com/1561/25195430059_5a59d15b1a_n.jpg)\nLet us begin with breaking the problem into manageable chunks before we try to solve it.\n\n{% codeblock Solution Pseudo Code  %}\nGenerate a number with required number of digits\n    - Convert it to decimal assuming it is base 2\n    - Test if it is a prime number\n    - If it is a prime number, go to step 1 else continue\n    - Convert it to decimal assuming it is base 3\n    - Test if it is a prime number\n    - If it is a prime number, go to step 1 else continue\n    - .... repeat till you reach base 10\nFind Divisors in each base\nPrint the number\nPrint all divisors\n{% endcodeblock %}\n\nThere are several complex problems inside the deceptively simple pseudocode\n\n1. Handle large numbers. 16 digits are way too big for a long datatype.\n1. Generate a number of required digits of 1's & 0's\n2. Convert the number to decimal from given base\n3. Testing if it is prime number\n4. Finding a divisor\n\nLet us solve them one by one\n\n##### [1/5]Handling insanely large numbers\nIt depends on the programming language of your choice. For this solution, I have chosen Java, which has java.math.BigInteger class that can store numbers and provides a very useful methods for prime number calculations. Example usage is as below.\n{% codeblock HelloWorldComponent.java lang:java  %}\nBigInteger num = new BigInteger(\"101010110000011\");\nnum.nextProbablePrime();\nnum.isProbablePrime(10);\nnum = new BigInteger(\"100001\",3);   // converts 100001 to base 10 from base 3\nnum.toString(2);                    // converts the num to base 2 from base 10\n{% endcodeblock %}\n\n##### [2/5]Generating combination of 1s and 0s that begin and end with 1\nFollowing is the algorithm I followed.\n1. Generate a string of zeroes of size n-2, assuming n is the length required\n1. Append 1 before and after the string of zeroes\n1. To Generate another number, imagine the number if in binary, adding two(10 in binary format) will give next odd number. Any number ending with 1 in binary number is an odd number.\n\n```\n100000000001\n           +\n          10\n------------\n100000000011\n           +\n          10\n------------\n100000000101\n\n```\nHow do you add 10 in binary format? Just convert that base 2 number to base 10 and add 2 and convert it back to binary number, which leads us to the following question.\n\n##### [3/5]Convert the number to decimal from given base\n```\nBigInteger incrementInBinaryByTwo(BigInteger num)\n{\n\treturn new BigInteger(new BigInteger(num.toString(),2).add(ONE).add(ONE).toString(2));\n}\n```\nConverting from a decimal number to binary format is as simple as calling toString method with 2 as the parameter.\n\n##### [4/5]Testing if it is a prime number\nBigInteger class of Java provides a nice API to work with prime numbers\n\nBigInteger.isProbablePrime() will return false if it is definately not a prime and returns true, if the probablity for this number to be a prime number is less than 2^-100. Hence for our purpose of finding it is not a prime number this would serve the purpose.\n```\nstatic boolean isComposite(BigInteger num) {\n    for (int base = 2; base < 11; base++) {\n        if (new BigInteger(num.toString(), base).isProbablePrime(10)) {\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n##### [5/5]Finding a divisor\nBigInteger has nextProbablePrime method that returns a prime number after the given number. So, if we use it on a prime number, we can get the next prime number and so on. As we can now get all prime numbers one after the another, we can divide our number with each prime number and return the first divisor. However, going indefinately till all primes are verified is inefficient for this problem. There will be simpler jam coins to mine. So, we will test for first 10000 prime numbers. If it is not divisible by any of it, we ignore that number and continue with next number. Here is the code.\n\n```\nstatic BigInteger findSmallestFactor(BigInteger n) {\n    BigInteger half = sqrt(n);\n    BigInteger factor = new BigInteger(\"2\");\n    int counter = 0;\n    while (factor.compareTo(half) < 0 && !n.mod(factor).equals(BigInteger.ZERO)) {\n        factor = factor.nextProbablePrime();\n        counter++;\n        if (counter == 10000) {\n            break;\n        }\n    }\n    if (!n.mod(factor).equals(BigInteger.ZERO)) {\n        throw new RuntimeException();\n    }\n    return factor;\n}\n```\n\n![Let us put all the pieces together](https://farm2.staticflickr.com/1593/25562936785_01a1831fc9_m.jpg)\n{% codeblock JamCoins.java lang:java  %}\npackage year2016;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport static java.math.BigInteger.ONE;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class JamCoins {\n\n    static List<BigInteger> coins = new ArrayList<>();\n\n    public static void processTest(String test) {\n\n        int size = Integer.parseInt(test.split(\" \")[0]);\n        int count = Integer.parseInt(test.split(\" \")[1]);\n\n        List<BigInteger> jamCoins = new ArrayList<>();\n        String zeroes = \"\";\n        for (int i = 2; i < size; i++) {\n            zeroes += \"0\";\n        }\n\n        BigInteger num = new BigInteger(\"1\" + zeroes + \"1\");\n        String entry = \"\";\n\n        while (num.toString().length() == size && jamCoins.size() < count) {\n            if (isComposite(num)) {\n                try {\n                    entry = num.toString();\n                    for (int base = 2; base < 11; base++) {\n                        entry += \" \" + findSmallestFactor(new BigInteger(num.toString(), base));\n                    }\n                    addOutput(entry);\n                    jamCoins.add(num);\n                } catch (Exception e) {\n                }\n            }\n\n            num = incrementInBinaryByTwo(num);\n        }\n    }\n\n    static BigInteger findSmallestFactor(BigInteger n) {\n        BigInteger half = sqrt(n);\n        BigInteger factor = new BigInteger(\"2\");\n        int counter = 0;\n        while (factor.compareTo(half) < 0 && !n.mod(factor).equals(BigInteger.ZERO)) {\n            factor = factor.nextProbablePrime();\n            counter++;\n            if (counter == 10000) {\n                break;\n            }\n        }\n        if (!n.mod(factor).equals(BigInteger.ZERO)) {\n            throw new RuntimeException();\n        }\n        return factor;\n    }\n\n    static BigInteger sqrt(BigInteger n) {\n        BigInteger div = BigInteger.ZERO.setBit(n.bitLength() / 2);\n        BigInteger div2 = div;\n        while (true) {\n            BigInteger y = div.add(n.divide(div)).shiftRight(1);\n            if (y.equals(div) || y.equals(div2)) {\n                return y;\n            }\n            div2 = div;\n            div = y;\n        }\n    }\n\n    static boolean isComposite(BigInteger num) {\n        for (int base = 2; base < 11; base++) {\n            if (new BigInteger(num.toString(), base).isProbablePrime(10)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    static final int max = 32;\n\n    static BigInteger incrementInBinaryByTwo(BigInteger num) {\n        return new BigInteger(new BigInteger(num.toString(), 2).add(ONE).add(ONE).toString(2));\n    }\n\n    static BigInteger decrementInBinary(BigInteger num) {\n        return new BigInteger(new BigInteger(num.toString(), 2).subtract(ONE).toString(2));\n    }\n\n    // Fixed Code Begins *********\n    private static int count = 0;\n    private static final String INPUT_FILE = \"input.txt\";\n    private static final Path OUTPUT_PATH = Paths.get(\"output.txt\");\n\n    private static final List<String> TESTS = new ArrayList<>();\n    private static final List<String> OUTPUT = new ArrayList<>();\n\n    public static void main(String[] args) throws IOException {\n        OUTPUT.clear();\n        OUTPUT.add(\"Case #1:\");\n        processInputFile();\n        Files.write(OUTPUT_PATH, OUTPUT, Charset.defaultCharset());\n    }\n\n    public static void addOutput(String answer) {\n        int c = OUTPUT.size() + 1;\n        OUTPUT.add(answer);\n    }\n\n    private static void processInputFile() throws IOException {\n        try (BufferedReader br = new BufferedReader(new FileReader(INPUT_FILE))) {\n            String line;\n            count = Integer.parseInt(br.readLine());\n            while ((line = br.readLine()) != null) {\n                processTest(line);\n            }\n        }\n    }\n}\n\n{% endcodeblock %}\n","slug":"2016/04/solving-jam-coins","published":1,"updated":"2016-04-29T06:17:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciplf69kq0006ouygvnxgiv9p","content":"<p><img src=\"https://farm2.staticflickr.com/1638/25470220981_c6d315ac60_m.jpg\" alt=\"The Problem\"></p>\n<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>Here is a moderate problem of CodeJam’s qualification round of 2016. The Jam Coins. Here is the description of the problem. You need to generate jamcoins of either 16 digits for small dataset or 32 digits for large datasets. Jam Coins follow the given rules…</p>\n<ol>\n<li>A Jam Coin is only made up of 1’s &amp; 0’s of the required number of digits.</li>\n<li>It begins and ends with 1.</li>\n<li>If that interpreted from base 2 to base 10, it should not be a prime number in any of them.</li>\n</ol>\n<p>For Small dataset, you need to generate 50 jam coins of 16 digits and for large dataset, you need to generate 500 jam coins of 32 digits following above rules.<br><a id=\"more\"></a><br>Output should be the list of Jam Coins where each is followed by a divisor of that number in each base.</p>\n<p>Let us say that we want to test if <code>11001101</code> is a jam coin or not.</p>\n<p>If we assume that the number is in base 2, it’s decimal equivalent is 2^7+2^6+2^3+2^2+1 = 205 =&gt; Not a prime number =&gt; Divisible by 5<br>If we assume that the number is in base 3, it’s decimal equivalent is 3^7+3^6+3^3+3^2+1 = 2953 =&gt; Prime Number =&gt; Hence not a jam coin</p>\n<p>Let us test <code>1010101</code></p>\n\n<div style=\"width: 50%;\">\n\n<table>\n<thead>\n<tr>\n<th>Base</th>\n<th>Decimal Equivalent</th>\n<th>Divisior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>85</td>\n<td>5</td>\n</tr>\n<tr>\n<td>3</td>\n<td>820</td>\n<td>2</td>\n</tr>\n<tr>\n<td>4</td>\n<td>4369</td>\n<td>17</td>\n</tr>\n<tr>\n<td>5</td>\n<td>16276</td>\n<td>2</td>\n</tr>\n<tr>\n<td>6</td>\n<td>47989</td>\n<td>37</td>\n</tr>\n<tr>\n<td>7</td>\n<td>120100</td>\n<td>2</td>\n</tr>\n<tr>\n<td>8</td>\n<td>266305</td>\n<td>5</td>\n</tr>\n<tr>\n<td>9</td>\n<td>538084</td>\n<td>2</td>\n</tr>\n<tr>\n<td>10</td>\n<td>1010101</td>\n<td>73</td>\n</tr>\n</tbody>\n</table>\n\n</div>\n\n<p>It is divisible by some or number in all bases from 2 to 10. Hence it is a Jam Coin. We need to generate such coins with given number of digits.</p>\n<p>Hence this can be included in output as below if the input is <code>7 10</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case #1:</span><br><span class=\"line\">1000001 5 2 17 2 13 2 5 2 101</span><br><span class=\"line\">1001011 3 2 5 2 7 2 3 2 11</span><br><span class=\"line\">1010101 5 2 17 2 37 2 5 2 73</span><br><span class=\"line\">1011101 3 7 11 3 5 43 3 11 7</span><br><span class=\"line\">1011111 5 2 3 2 37 2 5 2 3</span><br><span class=\"line\">1100011 3 2 5 2 7 2 3 2 11</span><br><span class=\"line\">1101001 3 2 5 2 7 2 3 2 11</span><br><span class=\"line\">1101111 3 2 3 2 7 2 3 2 3</span><br><span class=\"line\">1110111 7 2 3 2 43 2 17 2 3</span><br><span class=\"line\">1111011 3 2 3 2 7 2 3 2 3</span><br></pre></td></tr></table></figure>\n<h2 id=\"My-solution\"><a href=\"#My-solution\" class=\"headerlink\" title=\"My solution\"></a>My solution</h2><p><img src=\"https://farm2.staticflickr.com/1561/25195430059_5a59d15b1a_n.jpg\" alt=\"Let us take a closer look\"><br>Let us begin with breaking the problem into manageable chunks before we try to solve it.</p>\n<figure class=\"highlight plain\"><figcaption><span>Solution Pseudo Code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generate a number with required number of digits</span><br><span class=\"line\">    - Convert it to decimal assuming it is base 2</span><br><span class=\"line\">    - Test if it is a prime number</span><br><span class=\"line\">    - If it is a prime number, go to step 1 else continue</span><br><span class=\"line\">    - Convert it to decimal assuming it is base 3</span><br><span class=\"line\">    - Test if it is a prime number</span><br><span class=\"line\">    - If it is a prime number, go to step 1 else continue</span><br><span class=\"line\">    - .... repeat till you reach base 10</span><br><span class=\"line\">Find Divisors in each base</span><br><span class=\"line\">Print the number</span><br><span class=\"line\">Print all divisors</span><br></pre></td></tr></table></figure>\n<p>There are several complex problems inside the deceptively simple pseudocode</p>\n<ol>\n<li>Handle large numbers. 16 digits are way too big for a long datatype.</li>\n<li>Generate a number of required digits of 1’s &amp; 0’s</li>\n<li>Convert the number to decimal from given base</li>\n<li>Testing if it is prime number</li>\n<li>Finding a divisor</li>\n</ol>\n<p>Let us solve them one by one</p>\n<h5 id=\"1-5-Handling-insanely-large-numbers\"><a href=\"#1-5-Handling-insanely-large-numbers\" class=\"headerlink\" title=\"[1/5]Handling insanely large numbers\"></a>[1/5]Handling insanely large numbers</h5><p>It depends on the programming language of your choice. For this solution, I have chosen Java, which has java.math.BigInteger class that can store numbers and provides a very useful methods for prime number calculations. Example usage is as below.<br><figure class=\"highlight java\"><figcaption><span>HelloWorldComponent.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger num = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"101010110000011\"</span>);</span><br><span class=\"line\">num.nextProbablePrime();</span><br><span class=\"line\">num.isProbablePrime(<span class=\"number\">10</span>);</span><br><span class=\"line\">num = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"100001\"</span>,<span class=\"number\">3</span>);   <span class=\"comment\">// converts 100001 to base 10 from base 3</span></span><br><span class=\"line\">num.toString(<span class=\"number\">2</span>);                    <span class=\"comment\">// converts the num to base 2 from base 10</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"2-5-Generating-combination-of-1s-and-0s-that-begin-and-end-with-1\"><a href=\"#2-5-Generating-combination-of-1s-and-0s-that-begin-and-end-with-1\" class=\"headerlink\" title=\"[2/5]Generating combination of 1s and 0s that begin and end with 1\"></a>[2/5]Generating combination of 1s and 0s that begin and end with 1</h5><p>Following is the algorithm I followed.</p>\n<ol>\n<li>Generate a string of zeroes of size n-2, assuming n is the length required</li>\n<li>Append 1 before and after the string of zeroes</li>\n<li>To Generate another number, imagine the number if in binary, adding two(10 in binary format) will give next odd number. Any number ending with 1 in binary number is an odd number.</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100000000001</span><br><span class=\"line\">           +</span><br><span class=\"line\">          10</span><br><span class=\"line\">------------</span><br><span class=\"line\">100000000011</span><br><span class=\"line\">           +</span><br><span class=\"line\">          10</span><br><span class=\"line\">------------</span><br><span class=\"line\">100000000101</span><br></pre></td></tr></table></figure>\n<p>How do you add 10 in binary format? Just convert that base 2 number to base 10 and add 2 and convert it back to binary number, which leads us to the following question.</p>\n<h5 id=\"3-5-Convert-the-number-to-decimal-from-given-base\"><a href=\"#3-5-Convert-the-number-to-decimal-from-given-base\" class=\"headerlink\" title=\"[3/5]Convert the number to decimal from given base\"></a>[3/5]Convert the number to decimal from given base</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger incrementInBinaryByTwo(BigInteger num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn new BigInteger(new BigInteger(num.toString(),2).add(ONE).add(ONE).toString(2));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Converting from a decimal number to binary format is as simple as calling toString method with 2 as the parameter.</p>\n<h5 id=\"4-5-Testing-if-it-is-a-prime-number\"><a href=\"#4-5-Testing-if-it-is-a-prime-number\" class=\"headerlink\" title=\"[4/5]Testing if it is a prime number\"></a>[4/5]Testing if it is a prime number</h5><p>BigInteger class of Java provides a nice API to work with prime numbers</p>\n<p>BigInteger.isProbablePrime() will return false if it is definately not a prime and returns true, if the probablity for this number to be a prime number is less than 2^-100. Hence for our purpose of finding it is not a prime number this would serve the purpose.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static boolean isComposite(BigInteger num) &#123;</span><br><span class=\"line\">    for (int base = 2; base &lt; 11; base++) &#123;</span><br><span class=\"line\">        if (new BigInteger(num.toString(), base).isProbablePrime(10)) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"5-5-Finding-a-divisor\"><a href=\"#5-5-Finding-a-divisor\" class=\"headerlink\" title=\"[5/5]Finding a divisor\"></a>[5/5]Finding a divisor</h5><p>BigInteger has nextProbablePrime method that returns a prime number after the given number. So, if we use it on a prime number, we can get the next prime number and so on. As we can now get all prime numbers one after the another, we can divide our number with each prime number and return the first divisor. However, going indefinately till all primes are verified is inefficient for this problem. There will be simpler jam coins to mine. So, we will test for first 10000 prime numbers. If it is not divisible by any of it, we ignore that number and continue with next number. Here is the code.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static BigInteger findSmallestFactor(BigInteger n) &#123;</span><br><span class=\"line\">    BigInteger half = sqrt(n);</span><br><span class=\"line\">    BigInteger factor = new BigInteger(&quot;2&quot;);</span><br><span class=\"line\">    int counter = 0;</span><br><span class=\"line\">    while (factor.compareTo(half) &lt; 0 &amp;&amp; !n.mod(factor).equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">        factor = factor.nextProbablePrime();</span><br><span class=\"line\">        counter++;</span><br><span class=\"line\">        if (counter == 10000) &#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!n.mod(factor).equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">        throw new RuntimeException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return factor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://farm2.staticflickr.com/1593/25562936785_01a1831fc9_m.jpg\" alt=\"Let us put all the pieces together\"><br><figure class=\"highlight java\"><figcaption><span>JamCoins.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> year2016;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.math.BigInteger.ONE;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JamCoins</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> List&lt;BigInteger&gt; coins = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">processTest</span><span class=\"params\">(String test)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = Integer.parseInt(test.split(<span class=\"string\">\" \"</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = Integer.parseInt(test.split(<span class=\"string\">\" \"</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;BigInteger&gt; jamCoins = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        String zeroes = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            zeroes += <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        BigInteger num = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"1\"</span> + zeroes + <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        String entry = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num.toString().length() == size &amp;&amp; jamCoins.size() &lt; count) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isComposite(num)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    entry = num.toString();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> base = <span class=\"number\">2</span>; base &lt; <span class=\"number\">11</span>; base++) &#123;</span><br><span class=\"line\">                        entry += <span class=\"string\">\" \"</span> + findSmallestFactor(<span class=\"keyword\">new</span> BigInteger(num.toString(), base));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    addOutput(entry);</span><br><span class=\"line\">                    jamCoins.add(num);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            num = incrementInBinaryByTwo(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInteger <span class=\"title\">findSmallestFactor</span><span class=\"params\">(BigInteger n)</span> </span>&#123;</span><br><span class=\"line\">        BigInteger half = sqrt(n);</span><br><span class=\"line\">        BigInteger factor = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (factor.compareTo(half) &lt; <span class=\"number\">0</span> &amp;&amp; !n.mod(factor).equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">            factor = factor.nextProbablePrime();</span><br><span class=\"line\">            counter++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (counter == <span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!n.mod(factor).equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> factor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInteger <span class=\"title\">sqrt</span><span class=\"params\">(BigInteger n)</span> </span>&#123;</span><br><span class=\"line\">        BigInteger div = BigInteger.ZERO.setBit(n.bitLength() / <span class=\"number\">2</span>);</span><br><span class=\"line\">        BigInteger div2 = div;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            BigInteger y = div.add(n.divide(div)).shiftRight(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (y.equals(div) || y.equals(div2)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            div2 = div;</span><br><span class=\"line\">            div = y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isComposite</span><span class=\"params\">(BigInteger num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> base = <span class=\"number\">2</span>; base &lt; <span class=\"number\">11</span>; base++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> BigInteger(num.toString(), base).isProbablePrime(<span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> max = <span class=\"number\">32</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInteger <span class=\"title\">incrementInBinaryByTwo</span><span class=\"params\">(BigInteger num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(<span class=\"keyword\">new</span> BigInteger(num.toString(), <span class=\"number\">2</span>).add(ONE).add(ONE).toString(<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInteger <span class=\"title\">decrementInBinary</span><span class=\"params\">(BigInteger num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(<span class=\"keyword\">new</span> BigInteger(num.toString(), <span class=\"number\">2</span>).subtract(ONE).toString(<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Fixed Code Begins *********</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String INPUT_FILE = <span class=\"string\">\"input.txt\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Path OUTPUT_PATH = Paths.get(<span class=\"string\">\"output.txt\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> List&lt;String&gt; TESTS = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> List&lt;String&gt; OUTPUT = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        OUTPUT.clear();</span><br><span class=\"line\">        OUTPUT.add(<span class=\"string\">\"Case #1:\"</span>);</span><br><span class=\"line\">        processInputFile();</span><br><span class=\"line\">        Files.write(OUTPUT_PATH, OUTPUT, Charset.defaultCharset());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addOutput</span><span class=\"params\">(String answer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = OUTPUT.size() + <span class=\"number\">1</span>;</span><br><span class=\"line\">        OUTPUT.add(answer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">processInputFile</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(INPUT_FILE))) &#123;</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            count = Integer.parseInt(br.readLine());</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((line = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                processTest(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p><img src=\"https://farm2.staticflickr.com/1638/25470220981_c6d315ac60_m.jpg\" alt=\"The Problem\"></p>\n<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>Here is a moderate problem of CodeJam’s qualification round of 2016. The Jam Coins. Here is the description of the problem. You need to generate jamcoins of either 16 digits for small dataset or 32 digits for large datasets. Jam Coins follow the given rules…</p>\n<ol>\n<li>A Jam Coin is only made up of 1’s &amp; 0’s of the required number of digits.</li>\n<li>It begins and ends with 1.</li>\n<li>If that interpreted from base 2 to base 10, it should not be a prime number in any of them.</li>\n</ol>\n<p>For Small dataset, you need to generate 50 jam coins of 16 digits and for large dataset, you need to generate 500 jam coins of 32 digits following above rules.<br>","more":"<br>Output should be the list of Jam Coins where each is followed by a divisor of that number in each base.</p>\n<p>Let us say that we want to test if <code>11001101</code> is a jam coin or not.</p>\n<p>If we assume that the number is in base 2, it’s decimal equivalent is 2^7+2^6+2^3+2^2+1 = 205 =&gt; Not a prime number =&gt; Divisible by 5<br>If we assume that the number is in base 3, it’s decimal equivalent is 3^7+3^6+3^3+3^2+1 = 2953 =&gt; Prime Number =&gt; Hence not a jam coin</p>\n<p>Let us test <code>1010101</code></p>\n\n<div style=\"width: 50%;\">\n\n<table>\n<thead>\n<tr>\n<th>Base</th>\n<th>Decimal Equivalent</th>\n<th>Divisior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>85</td>\n<td>5</td>\n</tr>\n<tr>\n<td>3</td>\n<td>820</td>\n<td>2</td>\n</tr>\n<tr>\n<td>4</td>\n<td>4369</td>\n<td>17</td>\n</tr>\n<tr>\n<td>5</td>\n<td>16276</td>\n<td>2</td>\n</tr>\n<tr>\n<td>6</td>\n<td>47989</td>\n<td>37</td>\n</tr>\n<tr>\n<td>7</td>\n<td>120100</td>\n<td>2</td>\n</tr>\n<tr>\n<td>8</td>\n<td>266305</td>\n<td>5</td>\n</tr>\n<tr>\n<td>9</td>\n<td>538084</td>\n<td>2</td>\n</tr>\n<tr>\n<td>10</td>\n<td>1010101</td>\n<td>73</td>\n</tr>\n</tbody>\n</table>\n\n</div>\n\n<p>It is divisible by some or number in all bases from 2 to 10. Hence it is a Jam Coin. We need to generate such coins with given number of digits.</p>\n<p>Hence this can be included in output as below if the input is <code>7 10</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case #1:</span><br><span class=\"line\">1000001 5 2 17 2 13 2 5 2 101</span><br><span class=\"line\">1001011 3 2 5 2 7 2 3 2 11</span><br><span class=\"line\">1010101 5 2 17 2 37 2 5 2 73</span><br><span class=\"line\">1011101 3 7 11 3 5 43 3 11 7</span><br><span class=\"line\">1011111 5 2 3 2 37 2 5 2 3</span><br><span class=\"line\">1100011 3 2 5 2 7 2 3 2 11</span><br><span class=\"line\">1101001 3 2 5 2 7 2 3 2 11</span><br><span class=\"line\">1101111 3 2 3 2 7 2 3 2 3</span><br><span class=\"line\">1110111 7 2 3 2 43 2 17 2 3</span><br><span class=\"line\">1111011 3 2 3 2 7 2 3 2 3</span><br></pre></td></tr></table></figure>\n<h2 id=\"My-solution\"><a href=\"#My-solution\" class=\"headerlink\" title=\"My solution\"></a>My solution</h2><p><img src=\"https://farm2.staticflickr.com/1561/25195430059_5a59d15b1a_n.jpg\" alt=\"Let us take a closer look\"><br>Let us begin with breaking the problem into manageable chunks before we try to solve it.</p>\n<figure class=\"highlight plain\"><figcaption><span>Solution Pseudo Code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generate a number with required number of digits</span><br><span class=\"line\">    - Convert it to decimal assuming it is base 2</span><br><span class=\"line\">    - Test if it is a prime number</span><br><span class=\"line\">    - If it is a prime number, go to step 1 else continue</span><br><span class=\"line\">    - Convert it to decimal assuming it is base 3</span><br><span class=\"line\">    - Test if it is a prime number</span><br><span class=\"line\">    - If it is a prime number, go to step 1 else continue</span><br><span class=\"line\">    - .... repeat till you reach base 10</span><br><span class=\"line\">Find Divisors in each base</span><br><span class=\"line\">Print the number</span><br><span class=\"line\">Print all divisors</span><br></pre></td></tr></table></figure>\n<p>There are several complex problems inside the deceptively simple pseudocode</p>\n<ol>\n<li>Handle large numbers. 16 digits are way too big for a long datatype.</li>\n<li>Generate a number of required digits of 1’s &amp; 0’s</li>\n<li>Convert the number to decimal from given base</li>\n<li>Testing if it is prime number</li>\n<li>Finding a divisor</li>\n</ol>\n<p>Let us solve them one by one</p>\n<h5 id=\"1-5-Handling-insanely-large-numbers\"><a href=\"#1-5-Handling-insanely-large-numbers\" class=\"headerlink\" title=\"[1/5]Handling insanely large numbers\"></a>[1/5]Handling insanely large numbers</h5><p>It depends on the programming language of your choice. For this solution, I have chosen Java, which has java.math.BigInteger class that can store numbers and provides a very useful methods for prime number calculations. Example usage is as below.<br><figure class=\"highlight java\"><figcaption><span>HelloWorldComponent.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger num = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"101010110000011\"</span>);</span><br><span class=\"line\">num.nextProbablePrime();</span><br><span class=\"line\">num.isProbablePrime(<span class=\"number\">10</span>);</span><br><span class=\"line\">num = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"100001\"</span>,<span class=\"number\">3</span>);   <span class=\"comment\">// converts 100001 to base 10 from base 3</span></span><br><span class=\"line\">num.toString(<span class=\"number\">2</span>);                    <span class=\"comment\">// converts the num to base 2 from base 10</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"2-5-Generating-combination-of-1s-and-0s-that-begin-and-end-with-1\"><a href=\"#2-5-Generating-combination-of-1s-and-0s-that-begin-and-end-with-1\" class=\"headerlink\" title=\"[2/5]Generating combination of 1s and 0s that begin and end with 1\"></a>[2/5]Generating combination of 1s and 0s that begin and end with 1</h5><p>Following is the algorithm I followed.</p>\n<ol>\n<li>Generate a string of zeroes of size n-2, assuming n is the length required</li>\n<li>Append 1 before and after the string of zeroes</li>\n<li>To Generate another number, imagine the number if in binary, adding two(10 in binary format) will give next odd number. Any number ending with 1 in binary number is an odd number.</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100000000001</span><br><span class=\"line\">           +</span><br><span class=\"line\">          10</span><br><span class=\"line\">------------</span><br><span class=\"line\">100000000011</span><br><span class=\"line\">           +</span><br><span class=\"line\">          10</span><br><span class=\"line\">------------</span><br><span class=\"line\">100000000101</span><br></pre></td></tr></table></figure>\n<p>How do you add 10 in binary format? Just convert that base 2 number to base 10 and add 2 and convert it back to binary number, which leads us to the following question.</p>\n<h5 id=\"3-5-Convert-the-number-to-decimal-from-given-base\"><a href=\"#3-5-Convert-the-number-to-decimal-from-given-base\" class=\"headerlink\" title=\"[3/5]Convert the number to decimal from given base\"></a>[3/5]Convert the number to decimal from given base</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger incrementInBinaryByTwo(BigInteger num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn new BigInteger(new BigInteger(num.toString(),2).add(ONE).add(ONE).toString(2));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Converting from a decimal number to binary format is as simple as calling toString method with 2 as the parameter.</p>\n<h5 id=\"4-5-Testing-if-it-is-a-prime-number\"><a href=\"#4-5-Testing-if-it-is-a-prime-number\" class=\"headerlink\" title=\"[4/5]Testing if it is a prime number\"></a>[4/5]Testing if it is a prime number</h5><p>BigInteger class of Java provides a nice API to work with prime numbers</p>\n<p>BigInteger.isProbablePrime() will return false if it is definately not a prime and returns true, if the probablity for this number to be a prime number is less than 2^-100. Hence for our purpose of finding it is not a prime number this would serve the purpose.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static boolean isComposite(BigInteger num) &#123;</span><br><span class=\"line\">    for (int base = 2; base &lt; 11; base++) &#123;</span><br><span class=\"line\">        if (new BigInteger(num.toString(), base).isProbablePrime(10)) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"5-5-Finding-a-divisor\"><a href=\"#5-5-Finding-a-divisor\" class=\"headerlink\" title=\"[5/5]Finding a divisor\"></a>[5/5]Finding a divisor</h5><p>BigInteger has nextProbablePrime method that returns a prime number after the given number. So, if we use it on a prime number, we can get the next prime number and so on. As we can now get all prime numbers one after the another, we can divide our number with each prime number and return the first divisor. However, going indefinately till all primes are verified is inefficient for this problem. There will be simpler jam coins to mine. So, we will test for first 10000 prime numbers. If it is not divisible by any of it, we ignore that number and continue with next number. Here is the code.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static BigInteger findSmallestFactor(BigInteger n) &#123;</span><br><span class=\"line\">    BigInteger half = sqrt(n);</span><br><span class=\"line\">    BigInteger factor = new BigInteger(&quot;2&quot;);</span><br><span class=\"line\">    int counter = 0;</span><br><span class=\"line\">    while (factor.compareTo(half) &lt; 0 &amp;&amp; !n.mod(factor).equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">        factor = factor.nextProbablePrime();</span><br><span class=\"line\">        counter++;</span><br><span class=\"line\">        if (counter == 10000) &#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!n.mod(factor).equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">        throw new RuntimeException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return factor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://farm2.staticflickr.com/1593/25562936785_01a1831fc9_m.jpg\" alt=\"Let us put all the pieces together\"><br><figure class=\"highlight java\"><figcaption><span>JamCoins.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> year2016;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.math.BigInteger.ONE;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JamCoins</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> List&lt;BigInteger&gt; coins = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">processTest</span><span class=\"params\">(String test)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = Integer.parseInt(test.split(<span class=\"string\">\" \"</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = Integer.parseInt(test.split(<span class=\"string\">\" \"</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;BigInteger&gt; jamCoins = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        String zeroes = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            zeroes += <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        BigInteger num = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"1\"</span> + zeroes + <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        String entry = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num.toString().length() == size &amp;&amp; jamCoins.size() &lt; count) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isComposite(num)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    entry = num.toString();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> base = <span class=\"number\">2</span>; base &lt; <span class=\"number\">11</span>; base++) &#123;</span><br><span class=\"line\">                        entry += <span class=\"string\">\" \"</span> + findSmallestFactor(<span class=\"keyword\">new</span> BigInteger(num.toString(), base));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    addOutput(entry);</span><br><span class=\"line\">                    jamCoins.add(num);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            num = incrementInBinaryByTwo(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInteger <span class=\"title\">findSmallestFactor</span><span class=\"params\">(BigInteger n)</span> </span>&#123;</span><br><span class=\"line\">        BigInteger half = sqrt(n);</span><br><span class=\"line\">        BigInteger factor = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (factor.compareTo(half) &lt; <span class=\"number\">0</span> &amp;&amp; !n.mod(factor).equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">            factor = factor.nextProbablePrime();</span><br><span class=\"line\">            counter++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (counter == <span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!n.mod(factor).equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> factor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInteger <span class=\"title\">sqrt</span><span class=\"params\">(BigInteger n)</span> </span>&#123;</span><br><span class=\"line\">        BigInteger div = BigInteger.ZERO.setBit(n.bitLength() / <span class=\"number\">2</span>);</span><br><span class=\"line\">        BigInteger div2 = div;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            BigInteger y = div.add(n.divide(div)).shiftRight(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (y.equals(div) || y.equals(div2)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            div2 = div;</span><br><span class=\"line\">            div = y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isComposite</span><span class=\"params\">(BigInteger num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> base = <span class=\"number\">2</span>; base &lt; <span class=\"number\">11</span>; base++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> BigInteger(num.toString(), base).isProbablePrime(<span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> max = <span class=\"number\">32</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInteger <span class=\"title\">incrementInBinaryByTwo</span><span class=\"params\">(BigInteger num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(<span class=\"keyword\">new</span> BigInteger(num.toString(), <span class=\"number\">2</span>).add(ONE).add(ONE).toString(<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInteger <span class=\"title\">decrementInBinary</span><span class=\"params\">(BigInteger num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(<span class=\"keyword\">new</span> BigInteger(num.toString(), <span class=\"number\">2</span>).subtract(ONE).toString(<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Fixed Code Begins *********</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String INPUT_FILE = <span class=\"string\">\"input.txt\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Path OUTPUT_PATH = Paths.get(<span class=\"string\">\"output.txt\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> List&lt;String&gt; TESTS = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> List&lt;String&gt; OUTPUT = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        OUTPUT.clear();</span><br><span class=\"line\">        OUTPUT.add(<span class=\"string\">\"Case #1:\"</span>);</span><br><span class=\"line\">        processInputFile();</span><br><span class=\"line\">        Files.write(OUTPUT_PATH, OUTPUT, Charset.defaultCharset());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addOutput</span><span class=\"params\">(String answer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = OUTPUT.size() + <span class=\"number\">1</span>;</span><br><span class=\"line\">        OUTPUT.add(answer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">processInputFile</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(INPUT_FILE))) &#123;</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            count = Integer.parseInt(br.readLine());</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((line = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                processTest(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>"},{"title":"Breadth First Traversal In a Binary Tree Without Recursion","date":"2016-05-16T18:30:00.000Z","author":"Buddha","description":"Breadth first Traversal in a binary tree is a famous problem related to binary trees tree","_content":"\n![Binary Tree Example](https://farm8.staticflickr.com/7466/26975009532_9fac6b112d_o.png)\n## The Problem\n\nImagine you have a binary tree where as shown above. You may be aware of InOrder traversal where you follow a scheme of visiting left subtree and then visit root node and finally visit right subtree. With small variations in order same is done in pre-order as well as post-order traversal. How do you do a breadth first traversal? It is slightly more tricky. Doing it non-recursively is even more difficult at first sight. Let me first explain what is breadthfirst traversal.\n\nDifferent traversals produce different output as shown below\n\n{% codeblock In-Order Traversal lang:java %}\n1 12 23 46 89 445 461 678 789\n{% endcodeblock %}\n\n{% codeblock Post-Order Traversal lang:java %}\n1 12 89 46 23 461 789 678 445\n{% endcodeblock %}\n\n{% codeblock Pre-Order Traversal lang:java %}\n445 23 12 1 46 89 678 461 789\n{% endcodeblock %}\n\n{% codeblock Level-Order Traversal lang:java %}\n445 23 678 12 46 461 789 1 89\n{% endcodeblock %}\n\n\n<!-- more -->\nTrick to solve any binary tree problem without Recursion is to use an auxiliary datastructure like Queue or Stack. For this problem, we shall use Queue as shown below code snippet.\n\nLogic is actually pretty simple, at every level after the root node, add left and right elements to the queue and repeat the process for child levels. As Queue, will give us the elements in FIFO order, when we pop the elements, we will be getting them in the order they are added, which is breadth wise.\n\n{% codeblock lang:java %}\npublic void levelOrderTraversal(BinaryTree<Integer> tree) {\n  Queue<BinaryTreeNode<Integer>> q = new LinkedBlockingQueue<>();\n  q.add((tree.getRootNode()));\n  while(true) {\n    BinaryTreeNode<Integer> temp = q.poll();\n\n    if(temp == null)\n      break;\n\n    System.out.println(temp.getValue());\n\n    if(temp.left != null)\n      q.add(temp.left);\n    if(temp.right != null)\n      q.add(temp.right);\n  }\n}\n{% endcodeblock %}\n\nBinaryTree Diagrams are generated using [Data Structure Visualizations](https://www.cs.usfca.edu/~galles/visualization/BST.html)\n","source":"_posts/2016/05/non-recursive-breadth-first-traversal-binary-tree.md","raw":"---\ntitle: Breadth First Traversal In a Binary Tree Without Recursion\ndate: 2016-05-17\ntags: ['problems', 'algorithms', 'java', 'solution', 'datastructures']\nauthor: Buddha\ndescription: Breadth first Traversal in a binary tree is a famous problem related to binary trees tree\n---\n\n![Binary Tree Example](https://farm8.staticflickr.com/7466/26975009532_9fac6b112d_o.png)\n## The Problem\n\nImagine you have a binary tree where as shown above. You may be aware of InOrder traversal where you follow a scheme of visiting left subtree and then visit root node and finally visit right subtree. With small variations in order same is done in pre-order as well as post-order traversal. How do you do a breadth first traversal? It is slightly more tricky. Doing it non-recursively is even more difficult at first sight. Let me first explain what is breadthfirst traversal.\n\nDifferent traversals produce different output as shown below\n\n{% codeblock In-Order Traversal lang:java %}\n1 12 23 46 89 445 461 678 789\n{% endcodeblock %}\n\n{% codeblock Post-Order Traversal lang:java %}\n1 12 89 46 23 461 789 678 445\n{% endcodeblock %}\n\n{% codeblock Pre-Order Traversal lang:java %}\n445 23 12 1 46 89 678 461 789\n{% endcodeblock %}\n\n{% codeblock Level-Order Traversal lang:java %}\n445 23 678 12 46 461 789 1 89\n{% endcodeblock %}\n\n\n<!-- more -->\nTrick to solve any binary tree problem without Recursion is to use an auxiliary datastructure like Queue or Stack. For this problem, we shall use Queue as shown below code snippet.\n\nLogic is actually pretty simple, at every level after the root node, add left and right elements to the queue and repeat the process for child levels. As Queue, will give us the elements in FIFO order, when we pop the elements, we will be getting them in the order they are added, which is breadth wise.\n\n{% codeblock lang:java %}\npublic void levelOrderTraversal(BinaryTree<Integer> tree) {\n  Queue<BinaryTreeNode<Integer>> q = new LinkedBlockingQueue<>();\n  q.add((tree.getRootNode()));\n  while(true) {\n    BinaryTreeNode<Integer> temp = q.poll();\n\n    if(temp == null)\n      break;\n\n    System.out.println(temp.getValue());\n\n    if(temp.left != null)\n      q.add(temp.left);\n    if(temp.right != null)\n      q.add(temp.right);\n  }\n}\n{% endcodeblock %}\n\nBinaryTree Diagrams are generated using [Data Structure Visualizations](https://www.cs.usfca.edu/~galles/visualization/BST.html)\n","slug":"2016/05/non-recursive-breadth-first-traversal-binary-tree","published":1,"updated":"2016-06-18T13:49:18.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciplf69l90008ouygzorbp3vb","content":"<p><img src=\"https://farm8.staticflickr.com/7466/26975009532_9fac6b112d_o.png\" alt=\"Binary Tree Example\"></p>\n<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>Imagine you have a binary tree where as shown above. You may be aware of InOrder traversal where you follow a scheme of visiting left subtree and then visit root node and finally visit right subtree. With small variations in order same is done in pre-order as well as post-order traversal. How do you do a breadth first traversal? It is slightly more tricky. Doing it non-recursively is even more difficult at first sight. Let me first explain what is breadthfirst traversal.</p>\n<p>Different traversals produce different output as shown below</p>\n<figure class=\"highlight java\"><figcaption><span>In-Order Traversal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">12</span> <span class=\"number\">23</span> <span class=\"number\">46</span> <span class=\"number\">89</span> <span class=\"number\">445</span> <span class=\"number\">461</span> <span class=\"number\">678</span> <span class=\"number\">789</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>Post-Order Traversal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">12</span> <span class=\"number\">89</span> <span class=\"number\">46</span> <span class=\"number\">23</span> <span class=\"number\">461</span> <span class=\"number\">789</span> <span class=\"number\">678</span> <span class=\"number\">445</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>Pre-Order Traversal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">445</span> <span class=\"number\">23</span> <span class=\"number\">12</span> <span class=\"number\">1</span> <span class=\"number\">46</span> <span class=\"number\">89</span> <span class=\"number\">678</span> <span class=\"number\">461</span> <span class=\"number\">789</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>Level-Order Traversal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">445</span> <span class=\"number\">23</span> <span class=\"number\">678</span> <span class=\"number\">12</span> <span class=\"number\">46</span> <span class=\"number\">461</span> <span class=\"number\">789</span> <span class=\"number\">1</span> <span class=\"number\">89</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>Trick to solve any binary tree problem without Recursion is to use an auxiliary datastructure like Queue or Stack. For this problem, we shall use Queue as shown below code snippet.</p>\n<p>Logic is actually pretty simple, at every level after the root node, add left and right elements to the queue and repeat the process for child levels. As Queue, will give us the elements in FIFO order, when we pop the elements, we will be getting them in the order they are added, which is breadth wise.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">levelOrderTraversal</span><span class=\"params\">(BinaryTree&lt;Integer&gt; tree)</span> </span>&#123;</span><br><span class=\"line\">  Queue&lt;BinaryTreeNode&lt;Integer&gt;&gt; q = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class=\"line\">  q.add((tree.getRootNode()));</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">    BinaryTreeNode&lt;Integer&gt; temp = q.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(temp.getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      q.add(temp.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      q.add(temp.right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BinaryTree Diagrams are generated using <a href=\"https://www.cs.usfca.edu/~galles/visualization/BST.html\" target=\"_blank\" rel=\"external\">Data Structure Visualizations</a></p>\n","excerpt":"<p><img src=\"https://farm8.staticflickr.com/7466/26975009532_9fac6b112d_o.png\" alt=\"Binary Tree Example\"></p>\n<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>Imagine you have a binary tree where as shown above. You may be aware of InOrder traversal where you follow a scheme of visiting left subtree and then visit root node and finally visit right subtree. With small variations in order same is done in pre-order as well as post-order traversal. How do you do a breadth first traversal? It is slightly more tricky. Doing it non-recursively is even more difficult at first sight. Let me first explain what is breadthfirst traversal.</p>\n<p>Different traversals produce different output as shown below</p>\n<figure class=\"highlight java\"><figcaption><span>In-Order Traversal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">12</span> <span class=\"number\">23</span> <span class=\"number\">46</span> <span class=\"number\">89</span> <span class=\"number\">445</span> <span class=\"number\">461</span> <span class=\"number\">678</span> <span class=\"number\">789</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>Post-Order Traversal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">12</span> <span class=\"number\">89</span> <span class=\"number\">46</span> <span class=\"number\">23</span> <span class=\"number\">461</span> <span class=\"number\">789</span> <span class=\"number\">678</span> <span class=\"number\">445</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>Pre-Order Traversal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">445</span> <span class=\"number\">23</span> <span class=\"number\">12</span> <span class=\"number\">1</span> <span class=\"number\">46</span> <span class=\"number\">89</span> <span class=\"number\">678</span> <span class=\"number\">461</span> <span class=\"number\">789</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>Level-Order Traversal</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">445</span> <span class=\"number\">23</span> <span class=\"number\">678</span> <span class=\"number\">12</span> <span class=\"number\">46</span> <span class=\"number\">461</span> <span class=\"number\">789</span> <span class=\"number\">1</span> <span class=\"number\">89</span></span><br></pre></td></tr></table></figure>","more":"<p>Trick to solve any binary tree problem without Recursion is to use an auxiliary datastructure like Queue or Stack. For this problem, we shall use Queue as shown below code snippet.</p>\n<p>Logic is actually pretty simple, at every level after the root node, add left and right elements to the queue and repeat the process for child levels. As Queue, will give us the elements in FIFO order, when we pop the elements, we will be getting them in the order they are added, which is breadth wise.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">levelOrderTraversal</span><span class=\"params\">(BinaryTree&lt;Integer&gt; tree)</span> </span>&#123;</span><br><span class=\"line\">  Queue&lt;BinaryTreeNode&lt;Integer&gt;&gt; q = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class=\"line\">  q.add((tree.getRootNode()));</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">    BinaryTreeNode&lt;Integer&gt; temp = q.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(temp.getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      q.add(temp.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      q.add(temp.right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BinaryTree Diagrams are generated using <a href=\"https://www.cs.usfca.edu/~galles/visualization/BST.html\">Data Structure Visualizations</a></p>"},{"title":"Open Source Patch Utility For Perforce","date":"2016-03-07T18:30:00.000Z","description":"Introduction to an opensource utility for generating patch files for pending changelists in perforce version controlling system","author":"Buddha","download":"https://github.com/jbuddha/perforce-patcher/blob/master/dist/perforce-patcher.jar?raw=true","sourcecode":"https://github.com/jbuddha/perforce-patcher","sourcetype":"g","_content":"\nPerforce is a proprietary version controlling system. It has been around for more than 20 years. However, one glaring limitation always bugs the users. The inability to generate proper diff files.\n![Where is my patch?](https://farm2.staticflickr.com/1441/25563016955_8a691e760b_n.jpg)\nI can anticipate what is going on in your mind, we can generate a diff file by using the command line interface. `p4 diff` helps us generate a diff file. However if you ever had a misfortune of trying to generate patch files on regular basis. You would understand the pain. It works fine as long as you just modify existing files. However, if you have new files added to the workspace to be checked into to the depot, you quickly run out of luck. One more problem is that you can’t control the files included in the diff file based on change list. It gives you diff file for all the files that are modified. Of course, you can give individual file names, but you have to repeat it either one by one or by using common wildcard. To overcome this, I have come up with a simple JavaFX utility.  Using this utility is as simple as it can get.\n<!-- more -->\n\nFirst step is to download the jar file. Click on the download button at the beginning or ending of the article. Just double click the jar file to run it.\n{% admonition warning Watchout %}\nYou Need JRE 8 to run this without any additional configuration. If you are using JRE 7, please keep jfxrt.jar in class path or simply copy it to your jre/lib/ext folder. jfxrt.jar is available inside your {jre or jdk}/lib folder.\n{% endadmonition %}\n\nUpon opening the application you will be presented with the login screen. Login with your regular perforce credentials, deselect Remember me, if you don’t want to store the data entered by you locally. By leaving the default value your credentials will be saved in the application cache so that you need not enter it again.\n![Login Pane](https://farm2.staticflickr.com/1626/25596793045_91c403dfd9_z.jpg)\n\n\n If the login is successful, you will be taken to the next screen otherwise check the Log pane for error. Select the local perforce workspace name and the change list id and click Generate Patch button and save the file at your preferred location through the Save dialog which pops up.\n![Patch Generation Pane](https://farm2.staticflickr.com/1501/25229331639_f3324f01b4_z.jpg)\n{% admonition info %}\nYou will be logged out upon closing the application automatically.You can download the utility as a runnable jar from the github repository folder.\n{% endadmonition %}\n\nYou can find the project and its source in github. If you like the project, and want to contribute by adding more features, please fork the github repo. It is a maven project so building it is as quick as a wink.\n","source":"_posts/2016/03/patch-utility-for-perforce.md","raw":"---\ntitle: Open Source Patch Utility For Perforce\ndate: 2016-03-08\ntags: ['javafx','opensource','perforce','java']\ndescription: Introduction to an opensource utility for generating patch files for pending changelists in perforce version controlling system\nauthor: Buddha\ndownload: https://github.com/jbuddha/perforce-patcher/blob/master/dist/perforce-patcher.jar?raw=true\nsourcecode: https://github.com/jbuddha/perforce-patcher\nsourcetype: g\n---\n\nPerforce is a proprietary version controlling system. It has been around for more than 20 years. However, one glaring limitation always bugs the users. The inability to generate proper diff files.\n![Where is my patch?](https://farm2.staticflickr.com/1441/25563016955_8a691e760b_n.jpg)\nI can anticipate what is going on in your mind, we can generate a diff file by using the command line interface. `p4 diff` helps us generate a diff file. However if you ever had a misfortune of trying to generate patch files on regular basis. You would understand the pain. It works fine as long as you just modify existing files. However, if you have new files added to the workspace to be checked into to the depot, you quickly run out of luck. One more problem is that you can’t control the files included in the diff file based on change list. It gives you diff file for all the files that are modified. Of course, you can give individual file names, but you have to repeat it either one by one or by using common wildcard. To overcome this, I have come up with a simple JavaFX utility.  Using this utility is as simple as it can get.\n<!-- more -->\n\nFirst step is to download the jar file. Click on the download button at the beginning or ending of the article. Just double click the jar file to run it.\n{% admonition warning Watchout %}\nYou Need JRE 8 to run this without any additional configuration. If you are using JRE 7, please keep jfxrt.jar in class path or simply copy it to your jre/lib/ext folder. jfxrt.jar is available inside your {jre or jdk}/lib folder.\n{% endadmonition %}\n\nUpon opening the application you will be presented with the login screen. Login with your regular perforce credentials, deselect Remember me, if you don’t want to store the data entered by you locally. By leaving the default value your credentials will be saved in the application cache so that you need not enter it again.\n![Login Pane](https://farm2.staticflickr.com/1626/25596793045_91c403dfd9_z.jpg)\n\n\n If the login is successful, you will be taken to the next screen otherwise check the Log pane for error. Select the local perforce workspace name and the change list id and click Generate Patch button and save the file at your preferred location through the Save dialog which pops up.\n![Patch Generation Pane](https://farm2.staticflickr.com/1501/25229331639_f3324f01b4_z.jpg)\n{% admonition info %}\nYou will be logged out upon closing the application automatically.You can download the utility as a runnable jar from the github repository folder.\n{% endadmonition %}\n\nYou can find the project and its source in github. If you like the project, and want to contribute by adding more features, please fork the github repo. It is a maven project so building it is as quick as a wink.\n","slug":"2016/03/patch-utility-for-perforce","published":1,"updated":"2016-04-29T06:17:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciplf69lp0009ouygq15bnui3","content":"<p>Perforce is a proprietary version controlling system. It has been around for more than 20 years. However, one glaring limitation always bugs the users. The inability to generate proper diff files.<br><img src=\"https://farm2.staticflickr.com/1441/25563016955_8a691e760b_n.jpg\" alt=\"Where is my patch?\"><br>I can anticipate what is going on in your mind, we can generate a diff file by using the command line interface. <code>p4 diff</code> helps us generate a diff file. However if you ever had a misfortune of trying to generate patch files on regular basis. You would understand the pain. It works fine as long as you just modify existing files. However, if you have new files added to the workspace to be checked into to the depot, you quickly run out of luck. One more problem is that you can’t control the files included in the diff file based on change list. It gives you diff file for all the files that are modified. Of course, you can give individual file names, but you have to repeat it either one by one or by using common wildcard. To overcome this, I have come up with a simple JavaFX utility.  Using this utility is as simple as it can get.<br><a id=\"more\"></a></p>\n<p>First step is to download the jar file. Click on the download button at the beginning or ending of the article. Just double click the jar file to run it.<br><div class=\"admonition warning\"><p class=\"admonition-title\">Watchout</p><p>You Need JRE 8 to run this without any additional configuration. If you are using JRE 7, please keep jfxrt.jar in class path or simply copy it to your jre/lib/ext folder. jfxrt.jar is available inside your {jre or jdk}/lib folder.</p></div></p>\n<p>Upon opening the application you will be presented with the login screen. Login with your regular perforce credentials, deselect Remember me, if you don’t want to store the data entered by you locally. By leaving the default value your credentials will be saved in the application cache so that you need not enter it again.<br><img src=\"https://farm2.staticflickr.com/1626/25596793045_91c403dfd9_z.jpg\" alt=\"Login Pane\"></p>\n<p> If the login is successful, you will be taken to the next screen otherwise check the Log pane for error. Select the local perforce workspace name and the change list id and click Generate Patch button and save the file at your preferred location through the Save dialog which pops up.<br><img src=\"https://farm2.staticflickr.com/1501/25229331639_f3324f01b4_z.jpg\" alt=\"Patch Generation Pane\"><br><div class=\"admonition info\"><p class=\"admonition-title\">Note</p><p>You will be logged out upon closing the application automatically.You can download the utility as a runnable jar from the github repository folder.</p></div></p>\n<p>You can find the project and its source in github. If you like the project, and want to contribute by adding more features, please fork the github repo. It is a maven project so building it is as quick as a wink.</p>\n","excerpt":"<p>Perforce is a proprietary version controlling system. It has been around for more than 20 years. However, one glaring limitation always bugs the users. The inability to generate proper diff files.<br><img src=\"https://farm2.staticflickr.com/1441/25563016955_8a691e760b_n.jpg\" alt=\"Where is my patch?\"><br>I can anticipate what is going on in your mind, we can generate a diff file by using the command line interface. <code>p4 diff</code> helps us generate a diff file. However if you ever had a misfortune of trying to generate patch files on regular basis. You would understand the pain. It works fine as long as you just modify existing files. However, if you have new files added to the workspace to be checked into to the depot, you quickly run out of luck. One more problem is that you can’t control the files included in the diff file based on change list. It gives you diff file for all the files that are modified. Of course, you can give individual file names, but you have to repeat it either one by one or by using common wildcard. To overcome this, I have come up with a simple JavaFX utility.  Using this utility is as simple as it can get.<br>","more":"</p>\n<p>First step is to download the jar file. Click on the download button at the beginning or ending of the article. Just double click the jar file to run it.<br><div class=\"admonition warning\"><p class=\"admonition-title\">Watchout</p><p>You Need JRE 8 to run this without any additional configuration. If you are using JRE 7, please keep jfxrt.jar in class path or simply copy it to your jre/lib/ext folder. jfxrt.jar is available inside your {jre or jdk}/lib folder.</p></div></p>\n<p>Upon opening the application you will be presented with the login screen. Login with your regular perforce credentials, deselect Remember me, if you don’t want to store the data entered by you locally. By leaving the default value your credentials will be saved in the application cache so that you need not enter it again.<br><img src=\"https://farm2.staticflickr.com/1626/25596793045_91c403dfd9_z.jpg\" alt=\"Login Pane\"></p>\n<p> If the login is successful, you will be taken to the next screen otherwise check the Log pane for error. Select the local perforce workspace name and the change list id and click Generate Patch button and save the file at your preferred location through the Save dialog which pops up.<br><img src=\"https://farm2.staticflickr.com/1501/25229331639_f3324f01b4_z.jpg\" alt=\"Patch Generation Pane\"><br><div class=\"admonition info\"><p class=\"admonition-title\">Note</p><p>You will be logged out upon closing the application automatically.You can download the utility as a runnable jar from the github repository folder.</p></div></p>\n<p>You can find the project and its source in github. If you like the project, and want to contribute by adding more features, please fork the github repo. It is a maven project so building it is as quick as a wink.</p>"},{"title":"Collapsible panel using OJet & jQuery","date":"2016-06-10T18:30:00.000Z","author":"Buddha","description":"If you have ever wanted to develop a div/panel that can be minimized or maximized and close by clicking on respective icons, this article shows you how to do it.","_content":"Before we begin, let me show you the final output we are going to get. Click Run Pen button if you want to see the collapsible panel in action\n\n{% codepen PzGZMW 'Collapsible and Expandable Panels' result wait 265 %}\n\nThe panel can be minimized or maximized by clicking on the arrow button. It can also be removed completely by clicking close button. How do we achieve this? I have used KnockoutJS, OracleJET and jQuery to achieve the result. RequireJS is also used but only to get the required libraries from CDN. However, OracleJet is predomantly is used for styling alone. Rest of the bindings can be achieved by regular KnockoutJS and jQuery. Read forward to learn how to get the above result.\n <!-- more -->\nIf you are not familiar with RequireJS and OracleJet, some of the things are bit tricky at first, hence basic knowledge on this is expected.\n## The View\nView mainly consists of Two elements. One is title bar and another is collapsible div. We can use font-awesome to get the icons.\n### Title bar\nTitle bar itself presents several problems. How can we push the icons to the right. We can achieve this very easily by seperating the title bar into 3 parts. The Title text, The icons, and the gap. We can very easily fix the icons and title text at their respective ends by making the gap a flex item that grows where as the other two remain fixed.\n\nOracle Jet provides Flex Bar for this kind of purposes. We can make a div a flex bar by applying `.oj-flex-bar` class. For the children, we have to use `.oj-flex-bar-start` and `.oj-flex-bar-end` classes for title text and icons div. However, we have to keep an empty div and give it `.oj-flex-item` class so that it grows or shrinks automatically when ever the title bar changes its size. This will ensure that icons stay at the end of title bar. Lines 3, 4 & 5 demonstrate the usage of these classes.\n\nFor icons, `fa-chevron-circle-down` and `fa-chevron-circle-up` from font-awesome library are used depending on state of the panel. No need to have two different icons as only one of them is used all the time. So, these classes are conditionally added to html based on collapsed state. Used regualar knockout css binding. Observe lines 4 and 5 in the following snippet. `collapsed` is an observable. When collapsed is true, down icon class is used for the `i` tag and when it is false, the down class will be removed. Same thing happens for the up icon but in reverse. Lines 7 & 8 demonstrate the conditional css binding. All other classes `fa oj-margin-start oj-padding-horizontal hoverable` are constant, hence directly set to `class` attribute of icon tag. `fa-times` works well for close button. Both these icons' click events are bound to functions. Close icon is bound to close funtion and min-max button button's click handler is collapse. We shall discuss these further in the view model section. The entire title bar is placed in a div whose id is header.\n\n{% codeblock Min-Max Icon binding lang:html %}\n<div id=\"panel\" class=\"oj-margin\" style=\"border: 1px solid\">\n  <div id=\"header\" class=\"oj-flex oj-panel oj-flex-bar\">\n    <div class=\"oj-flex-start\" >This is the title</div>\n    <div class=\"oj-flex-item\"></div>\n    <div class=\"oj-flex-end oj-panel-alt1 oj-margin-start\">\n      <i id=\"min-max-icon\" class=\"fa oj-margin-start oj-padding-horizontal hoverable\"\n          data-bind=\"click: collapse,\n                     css: {'fa-chevron-circle-down': collapsed(),\n                           'fa-chevron-circle-up':  !collapsed()}\"></i>\n      <i class=\"fa fa-close oj-padding-horizontal hoverable\" data-bind=\"click: close\"></i>\n    </div>\n  </div>\n  <div id=\"collapsableContent\" style=\"width: 300px;\">\n    <h1>{{val}}</h1>\n  </div>\n</div>\n{% endcodeblock %}\n\nThe collapsable content is placed in a seperate div `#collapsableContent`. I have used knockout punches to bind `val` observable to the content of h1 tag inside collapsible content. How this is collapsed is discussed in the next section.\n\n## The View Model\n\nView model is pretty simple. It has two observables, one is `val` whose content are bound to h1. This observable is not mandatory. The other observable is `collapsed`. This is quite important. Especially for switching minimise and maximise icons. This is either true of false. Upon calling `collapse` event handler, the value will be flipped.\n\n\n{% codeblock View Model lang:js %}\ndefine(['ojs/ojcore', 'knockout'], function (oj, ko) {\n  function panelWithIconsContentViewModel() {\n    var self = this;\n\n    self.val = \"I'm going to be collapsed, I have some text...\";\n    self.collapsed = ko.observable(false);\n\n    self.collapse = function collapse(event) {\n      $(\"#collapsableContent\").slideToggle();\n      self.collapsed(!self.collapsed());\n    };\n\n    self.close = function collapse(event) {\n      $(\"#panel\").remove();\n    };\n  }\n\n  return panelWithIconsContentViewModel;\n});\n{% endcodeblock %}\n\n\n`self.collapse` is a function that gets triggered upon clicking min or max function. jQuery's slideToggle function is used to slide the `collapsableContent` in and out of view giving an impression of minimize.\n\nThe other function is `self.close` which is bound to click handler of close icon. This simply removes the entire panel by using jQuery's remove method. You may want to do something more by showing a dialog asking whether user really wants to close or not, I chose to simply close it.\n\nI didn't include other configuration information that is required for oraclejet and other libraries in the above code snippet. Please refer the codepen's javascript resources given for configuration related code. However, if you are creating a seperate viewModel for the panel alone, no other code is necessary.\n\n{% codepen PzGZMW 'Collapsible and Expandable Panels' html %}\n\n\n----\n\nIf you are interested in non technical reading: [An escape or a possibility?](https://unfurledpages.wordpress.com/2016/06/01/an-escape-or-a-possibilty/)\n","source":"_posts/2016/06/collapsible-panel-in-oracle-jet.md","raw":"---\ntitle: Collapsible panel using OJet & jQuery\ndate: 2016-06-11\ntags: ['oraclejet', 'javascript', 'html', 'knockoutjs', 'jquery', 'css']\nauthor: Buddha\ndescription: If you have ever wanted to develop a div/panel that can be minimized or maximized and close by clicking on respective icons, this article shows you how to do it.\n---\nBefore we begin, let me show you the final output we are going to get. Click Run Pen button if you want to see the collapsible panel in action\n\n{% codepen PzGZMW 'Collapsible and Expandable Panels' result wait 265 %}\n\nThe panel can be minimized or maximized by clicking on the arrow button. It can also be removed completely by clicking close button. How do we achieve this? I have used KnockoutJS, OracleJET and jQuery to achieve the result. RequireJS is also used but only to get the required libraries from CDN. However, OracleJet is predomantly is used for styling alone. Rest of the bindings can be achieved by regular KnockoutJS and jQuery. Read forward to learn how to get the above result.\n <!-- more -->\nIf you are not familiar with RequireJS and OracleJet, some of the things are bit tricky at first, hence basic knowledge on this is expected.\n## The View\nView mainly consists of Two elements. One is title bar and another is collapsible div. We can use font-awesome to get the icons.\n### Title bar\nTitle bar itself presents several problems. How can we push the icons to the right. We can achieve this very easily by seperating the title bar into 3 parts. The Title text, The icons, and the gap. We can very easily fix the icons and title text at their respective ends by making the gap a flex item that grows where as the other two remain fixed.\n\nOracle Jet provides Flex Bar for this kind of purposes. We can make a div a flex bar by applying `.oj-flex-bar` class. For the children, we have to use `.oj-flex-bar-start` and `.oj-flex-bar-end` classes for title text and icons div. However, we have to keep an empty div and give it `.oj-flex-item` class so that it grows or shrinks automatically when ever the title bar changes its size. This will ensure that icons stay at the end of title bar. Lines 3, 4 & 5 demonstrate the usage of these classes.\n\nFor icons, `fa-chevron-circle-down` and `fa-chevron-circle-up` from font-awesome library are used depending on state of the panel. No need to have two different icons as only one of them is used all the time. So, these classes are conditionally added to html based on collapsed state. Used regualar knockout css binding. Observe lines 4 and 5 in the following snippet. `collapsed` is an observable. When collapsed is true, down icon class is used for the `i` tag and when it is false, the down class will be removed. Same thing happens for the up icon but in reverse. Lines 7 & 8 demonstrate the conditional css binding. All other classes `fa oj-margin-start oj-padding-horizontal hoverable` are constant, hence directly set to `class` attribute of icon tag. `fa-times` works well for close button. Both these icons' click events are bound to functions. Close icon is bound to close funtion and min-max button button's click handler is collapse. We shall discuss these further in the view model section. The entire title bar is placed in a div whose id is header.\n\n{% codeblock Min-Max Icon binding lang:html %}\n<div id=\"panel\" class=\"oj-margin\" style=\"border: 1px solid\">\n  <div id=\"header\" class=\"oj-flex oj-panel oj-flex-bar\">\n    <div class=\"oj-flex-start\" >This is the title</div>\n    <div class=\"oj-flex-item\"></div>\n    <div class=\"oj-flex-end oj-panel-alt1 oj-margin-start\">\n      <i id=\"min-max-icon\" class=\"fa oj-margin-start oj-padding-horizontal hoverable\"\n          data-bind=\"click: collapse,\n                     css: {'fa-chevron-circle-down': collapsed(),\n                           'fa-chevron-circle-up':  !collapsed()}\"></i>\n      <i class=\"fa fa-close oj-padding-horizontal hoverable\" data-bind=\"click: close\"></i>\n    </div>\n  </div>\n  <div id=\"collapsableContent\" style=\"width: 300px;\">\n    <h1>{{val}}</h1>\n  </div>\n</div>\n{% endcodeblock %}\n\nThe collapsable content is placed in a seperate div `#collapsableContent`. I have used knockout punches to bind `val` observable to the content of h1 tag inside collapsible content. How this is collapsed is discussed in the next section.\n\n## The View Model\n\nView model is pretty simple. It has two observables, one is `val` whose content are bound to h1. This observable is not mandatory. The other observable is `collapsed`. This is quite important. Especially for switching minimise and maximise icons. This is either true of false. Upon calling `collapse` event handler, the value will be flipped.\n\n\n{% codeblock View Model lang:js %}\ndefine(['ojs/ojcore', 'knockout'], function (oj, ko) {\n  function panelWithIconsContentViewModel() {\n    var self = this;\n\n    self.val = \"I'm going to be collapsed, I have some text...\";\n    self.collapsed = ko.observable(false);\n\n    self.collapse = function collapse(event) {\n      $(\"#collapsableContent\").slideToggle();\n      self.collapsed(!self.collapsed());\n    };\n\n    self.close = function collapse(event) {\n      $(\"#panel\").remove();\n    };\n  }\n\n  return panelWithIconsContentViewModel;\n});\n{% endcodeblock %}\n\n\n`self.collapse` is a function that gets triggered upon clicking min or max function. jQuery's slideToggle function is used to slide the `collapsableContent` in and out of view giving an impression of minimize.\n\nThe other function is `self.close` which is bound to click handler of close icon. This simply removes the entire panel by using jQuery's remove method. You may want to do something more by showing a dialog asking whether user really wants to close or not, I chose to simply close it.\n\nI didn't include other configuration information that is required for oraclejet and other libraries in the above code snippet. Please refer the codepen's javascript resources given for configuration related code. However, if you are creating a seperate viewModel for the panel alone, no other code is necessary.\n\n{% codepen PzGZMW 'Collapsible and Expandable Panels' html %}\n\n\n----\n\nIf you are interested in non technical reading: [An escape or a possibility?](https://unfurledpages.wordpress.com/2016/06/01/an-escape-or-a-possibilty/)\n","slug":"2016/06/collapsible-panel-in-oracle-jet","published":1,"updated":"2016-06-18T13:49:18.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciplf69n4001louyguj3hs4f2","content":"<p>Before we begin, let me show you the final output we are going to get. Click Run Pen button if you want to see the collapsible panel in action</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"PzGZMW\" data-default-tab=\"result\" data-user=\"jbuddha\" data-embed-version=\"2\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/jbuddha/pen/PzGZMW/\" target=\"_blank\" rel=\"external\">Collapsible and Expandable Panels</a> by Buddha (<a href=\"http://codepen.io/jbuddha\" target=\"_blank\" rel=\"external\">@jbuddha</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.</p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n<p>The panel can be minimized or maximized by clicking on the arrow button. It can also be removed completely by clicking close button. How do we achieve this? I have used KnockoutJS, OracleJET and jQuery to achieve the result. RequireJS is also used but only to get the required libraries from CDN. However, OracleJet is predomantly is used for styling alone. Rest of the bindings can be achieved by regular KnockoutJS and jQuery. Read forward to learn how to get the above result.<br> <a id=\"more\"></a><br>If you are not familiar with RequireJS and OracleJet, some of the things are bit tricky at first, hence basic knowledge on this is expected.</p>\n<h2 id=\"The-View\"><a href=\"#The-View\" class=\"headerlink\" title=\"The View\"></a>The View</h2><p>View mainly consists of Two elements. One is title bar and another is collapsible div. We can use font-awesome to get the icons.</p>\n<h3 id=\"Title-bar\"><a href=\"#Title-bar\" class=\"headerlink\" title=\"Title bar\"></a>Title bar</h3><p>Title bar itself presents several problems. How can we push the icons to the right. We can achieve this very easily by seperating the title bar into 3 parts. The Title text, The icons, and the gap. We can very easily fix the icons and title text at their respective ends by making the gap a flex item that grows where as the other two remain fixed.</p>\n<p>Oracle Jet provides Flex Bar for this kind of purposes. We can make a div a flex bar by applying <code>.oj-flex-bar</code> class. For the children, we have to use <code>.oj-flex-bar-start</code> and <code>.oj-flex-bar-end</code> classes for title text and icons div. However, we have to keep an empty div and give it <code>.oj-flex-item</code> class so that it grows or shrinks automatically when ever the title bar changes its size. This will ensure that icons stay at the end of title bar. Lines 3, 4 &amp; 5 demonstrate the usage of these classes.</p>\n<p>For icons, <code>fa-chevron-circle-down</code> and <code>fa-chevron-circle-up</code> from font-awesome library are used depending on state of the panel. No need to have two different icons as only one of them is used all the time. So, these classes are conditionally added to html based on collapsed state. Used regualar knockout css binding. Observe lines 4 and 5 in the following snippet. <code>collapsed</code> is an observable. When collapsed is true, down icon class is used for the <code>i</code> tag and when it is false, the down class will be removed. Same thing happens for the up icon but in reverse. Lines 7 &amp; 8 demonstrate the conditional css binding. All other classes <code>fa oj-margin-start oj-padding-horizontal hoverable</code> are constant, hence directly set to <code>class</code> attribute of icon tag. <code>fa-times</code> works well for close button. Both these icons’ click events are bound to functions. Close icon is bound to close funtion and min-max button button’s click handler is collapse. We shall discuss these further in the view model section. The entire title bar is placed in a div whose id is header.</p>\n<figure class=\"highlight html\"><figcaption><span>Min-Max Icon binding</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"panel\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"oj-margin\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border: 1px solid\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"oj-flex oj-panel oj-flex-bar\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"oj-flex-start\"</span> &gt;</span>This is the title<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"oj-flex-item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"oj-flex-end oj-panel-alt1 oj-margin-start\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">id</span>=<span class=\"string\">\"min-max-icon\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa oj-margin-start oj-padding-horizontal hoverable\"</span></span><br><span class=\"line\">          <span class=\"attr\">data-bind</span>=<span class=\"string\">\"click: collapse,</span><br><span class=\"line\">                     css: &#123;'fa-chevron-circle-down': collapsed(),</span><br><span class=\"line\">                           'fa-chevron-circle-up':  !collapsed()&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-close oj-padding-horizontal hoverable\"</span> <span class=\"attr\">data-bind</span>=<span class=\"string\">\"click: close\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"collapsableContent\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 300px;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The collapsable content is placed in a seperate div <code>#collapsableContent</code>. I have used knockout punches to bind <code>val</code> observable to the content of h1 tag inside collapsible content. How this is collapsed is discussed in the next section.</p>\n<h2 id=\"The-View-Model\"><a href=\"#The-View-Model\" class=\"headerlink\" title=\"The View Model\"></a>The View Model</h2><p>View model is pretty simple. It has two observables, one is <code>val</code> whose content are bound to h1. This observable is not mandatory. The other observable is <code>collapsed</code>. This is quite important. Especially for switching minimise and maximise icons. This is either true of false. Upon calling <code>collapse</code> event handler, the value will be flipped.</p>\n<figure class=\"highlight js\"><figcaption><span>View Model</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">'ojs/ojcore'</span>, <span class=\"string\">'knockout'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">oj, ko</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">panelWithIconsContentViewModel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.val = <span class=\"string\">\"I'm going to be collapsed, I have some text...\"</span>;</span><br><span class=\"line\">    self.collapsed = ko.observable(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    self.collapse = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collapse</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">\"#collapsableContent\"</span>).slideToggle();</span><br><span class=\"line\">      self.collapsed(!self.collapsed());</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.close = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collapse</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">\"#panel\"</span>).remove();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> panelWithIconsContentViewModel;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>self.collapse</code> is a function that gets triggered upon clicking min or max function. jQuery’s slideToggle function is used to slide the <code>collapsableContent</code> in and out of view giving an impression of minimize.</p>\n<p>The other function is <code>self.close</code> which is bound to click handler of close icon. This simply removes the entire panel by using jQuery’s remove method. You may want to do something more by showing a dialog asking whether user really wants to close or not, I chose to simply close it.</p>\n<p>I didn’t include other configuration information that is required for oraclejet and other libraries in the above code snippet. Please refer the codepen’s javascript resources given for configuration related code. However, if you are creating a seperate viewModel for the panel alone, no other code is necessary.</p>\n<p data-height=\"350\" data-theme-id=\"0\" data-slug-hash=\"PzGZMW\" data-default-tab=\"html\" data-user=\"jbuddha\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/jbuddha/pen/PzGZMW/\" target=\"_blank\" rel=\"external\">Collapsible and Expandable Panels</a> by Buddha (<a href=\"http://codepen.io/jbuddha\" target=\"_blank\" rel=\"external\">@jbuddha</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.</p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n<hr>\n<p>If you are interested in non technical reading: <a href=\"https://unfurledpages.wordpress.com/2016/06/01/an-escape-or-a-possibilty/\" target=\"_blank\" rel=\"external\">An escape or a possibility?</a></p>\n","excerpt":"<p>Before we begin, let me show you the final output we are going to get. Click Run Pen button if you want to see the collapsible panel in action</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"PzGZMW\" data-default-tab=\"result\" data-user=\"jbuddha\" data-embed-version=\"2\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/jbuddha/pen/PzGZMW/\">Collapsible and Expandable Panels</a> by Buddha (<a href=\"http://codepen.io/jbuddha\">@jbuddha</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n<p>The panel can be minimized or maximized by clicking on the arrow button. It can also be removed completely by clicking close button. How do we achieve this? I have used KnockoutJS, OracleJET and jQuery to achieve the result. RequireJS is also used but only to get the required libraries from CDN. However, OracleJet is predomantly is used for styling alone. Rest of the bindings can be achieved by regular KnockoutJS and jQuery. Read forward to learn how to get the above result.<br>","more":"<br>If you are not familiar with RequireJS and OracleJet, some of the things are bit tricky at first, hence basic knowledge on this is expected.</p>\n<h2 id=\"The-View\"><a href=\"#The-View\" class=\"headerlink\" title=\"The View\"></a>The View</h2><p>View mainly consists of Two elements. One is title bar and another is collapsible div. We can use font-awesome to get the icons.</p>\n<h3 id=\"Title-bar\"><a href=\"#Title-bar\" class=\"headerlink\" title=\"Title bar\"></a>Title bar</h3><p>Title bar itself presents several problems. How can we push the icons to the right. We can achieve this very easily by seperating the title bar into 3 parts. The Title text, The icons, and the gap. We can very easily fix the icons and title text at their respective ends by making the gap a flex item that grows where as the other two remain fixed.</p>\n<p>Oracle Jet provides Flex Bar for this kind of purposes. We can make a div a flex bar by applying <code>.oj-flex-bar</code> class. For the children, we have to use <code>.oj-flex-bar-start</code> and <code>.oj-flex-bar-end</code> classes for title text and icons div. However, we have to keep an empty div and give it <code>.oj-flex-item</code> class so that it grows or shrinks automatically when ever the title bar changes its size. This will ensure that icons stay at the end of title bar. Lines 3, 4 &amp; 5 demonstrate the usage of these classes.</p>\n<p>For icons, <code>fa-chevron-circle-down</code> and <code>fa-chevron-circle-up</code> from font-awesome library are used depending on state of the panel. No need to have two different icons as only one of them is used all the time. So, these classes are conditionally added to html based on collapsed state. Used regualar knockout css binding. Observe lines 4 and 5 in the following snippet. <code>collapsed</code> is an observable. When collapsed is true, down icon class is used for the <code>i</code> tag and when it is false, the down class will be removed. Same thing happens for the up icon but in reverse. Lines 7 &amp; 8 demonstrate the conditional css binding. All other classes <code>fa oj-margin-start oj-padding-horizontal hoverable</code> are constant, hence directly set to <code>class</code> attribute of icon tag. <code>fa-times</code> works well for close button. Both these icons’ click events are bound to functions. Close icon is bound to close funtion and min-max button button’s click handler is collapse. We shall discuss these further in the view model section. The entire title bar is placed in a div whose id is header.</p>\n<figure class=\"highlight html\"><figcaption><span>Min-Max Icon binding</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"panel\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"oj-margin\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border: 1px solid\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"oj-flex oj-panel oj-flex-bar\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"oj-flex-start\"</span> &gt;</span>This is the title<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"oj-flex-item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"oj-flex-end oj-panel-alt1 oj-margin-start\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">id</span>=<span class=\"string\">\"min-max-icon\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa oj-margin-start oj-padding-horizontal hoverable\"</span></span><br><span class=\"line\">          <span class=\"attr\">data-bind</span>=<span class=\"string\">\"click: collapse,</span><br><span class=\"line\">                     css: &#123;'fa-chevron-circle-down': collapsed(),</span><br><span class=\"line\">                           'fa-chevron-circle-up':  !collapsed()&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-close oj-padding-horizontal hoverable\"</span> <span class=\"attr\">data-bind</span>=<span class=\"string\">\"click: close\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"collapsableContent\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 300px;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The collapsable content is placed in a seperate div <code>#collapsableContent</code>. I have used knockout punches to bind <code>val</code> observable to the content of h1 tag inside collapsible content. How this is collapsed is discussed in the next section.</p>\n<h2 id=\"The-View-Model\"><a href=\"#The-View-Model\" class=\"headerlink\" title=\"The View Model\"></a>The View Model</h2><p>View model is pretty simple. It has two observables, one is <code>val</code> whose content are bound to h1. This observable is not mandatory. The other observable is <code>collapsed</code>. This is quite important. Especially for switching minimise and maximise icons. This is either true of false. Upon calling <code>collapse</code> event handler, the value will be flipped.</p>\n<figure class=\"highlight js\"><figcaption><span>View Model</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">'ojs/ojcore'</span>, <span class=\"string\">'knockout'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">oj, ko</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">panelWithIconsContentViewModel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.val = <span class=\"string\">\"I'm going to be collapsed, I have some text...\"</span>;</span><br><span class=\"line\">    self.collapsed = ko.observable(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    self.collapse = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collapse</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">\"#collapsableContent\"</span>).slideToggle();</span><br><span class=\"line\">      self.collapsed(!self.collapsed());</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.close = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collapse</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">\"#panel\"</span>).remove();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> panelWithIconsContentViewModel;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>self.collapse</code> is a function that gets triggered upon clicking min or max function. jQuery’s slideToggle function is used to slide the <code>collapsableContent</code> in and out of view giving an impression of minimize.</p>\n<p>The other function is <code>self.close</code> which is bound to click handler of close icon. This simply removes the entire panel by using jQuery’s remove method. You may want to do something more by showing a dialog asking whether user really wants to close or not, I chose to simply close it.</p>\n<p>I didn’t include other configuration information that is required for oraclejet and other libraries in the above code snippet. Please refer the codepen’s javascript resources given for configuration related code. However, if you are creating a seperate viewModel for the panel alone, no other code is necessary.</p>\n<p data-height=\"350\" data-theme-id=\"0\" data-slug-hash=\"PzGZMW\" data-default-tab=\"html\" data-user=\"jbuddha\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/jbuddha/pen/PzGZMW/\">Collapsible and Expandable Panels</a> by Buddha (<a href=\"http://codepen.io/jbuddha\">@jbuddha</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n<hr>\n<p>If you are interested in non technical reading: <a href=\"https://unfurledpages.wordpress.com/2016/06/01/an-escape-or-a-possibilty/\">An escape or a possibility?</a></p>"},{"title":"Print Right View of a Binary Tree without using Recursion","date":"2016-07-21T18:30:00.000Z","author":"Buddha","description":"This article shows you how to print right view of a binary tree, which using recursion.","_content":"\n![Right View of Binary Tree](https://c1.staticflickr.com/9/8878/28188948920_3c502f1584.jpg)\n\n## The Problem\n\nImagine you have a binary tree and wants to get all the nodes that will be visible when seen from the right side of the tree. How do you print all such nodes? Final output for this tree should be 44, 51, 65, 28. In other words, the first nodes we touch upon if we draw horizontal lines from right side of the tree. Read on to find the solution.\n\n <!-- more -->\n\n## The Solution\n\nQuicktip, whenever we try to do something without using recursion, you need to use some auxiliary datastructure like Queue or Stack. To solve this problem, we use a queue. \n\nTo solve this problem, we use a mechanism similar to {% post_link 2016/05/non-recursive-breadth-first-traversal-binary-tree Breadth First Traversal %}. \n\nWe start with pushing the root node and a null node into queue, to indicate first level is complete. We begin iterating until queue becomes empty. In every iteration, we dequeue a node, if it is not null node, we enqueue its children to the end of queue. We keep adding until children of all the nodes are added to queue. \n\nIf we encounter a null node, it means we reached end of the current level. We need to print the node dequeued before this node. To acheive this, we keep checking if next node in the queue is a null node by using `peek` method. As soon as the peek method returns null, it means this is the last node in the current level, we have to print it. If we get a null node, we have to check if there are more nodes to be dequeued, if there are no more nodes, we have reached end of the binary tree, otherwise, we just reached end of current level and more nodes are present in the queue. \n\nFind the program below.\n\n{% codeblock Right View of A Binary Tree lang:java %}\npublic void rightView(Node root) {\n    Queue<Node> queue = new Queue<>();\n    if(root != null) {\n        queue.enqueue(root);\n        queue.enqueue(null);  // first level is over\n    }\n\n    while (!queue.isEmpty()) {\n        Node temp = queue.dequeue();\n        if(temp == null) {\n            if(queue.getSize() > 0)\n                queue.enqueue(null);   // current level is over\n            continue;\n        }\n\n        if(queue.peek() == null)      // next node is null means end of current level, so print it.\n            System.out.println(temp.data);\n        if(temp.left != null)\n            queue.enqueue(temp.left);\n        if(temp.right != null)\n            queue.enqueue(temp.right);\n    }\n}\n{% endcodeblock %}\n\nBinaryTree siagram is generated by using [Binary Tree Visualizer](http://btv.melezinek.cz/binary-search-tree.html)\n\n\n----\n\nIf you are interested in non technical reading: [An escape or a possibility?](https://unfurledpages.wordpress.com/2016/06/01/an-escape-or-a-possibilty/)\n","source":"_posts/2016/07/right-view-of-binarytree-without-recursion.md","raw":"---\ntitle: Print Right View of a Binary Tree without using Recursion\ndate: 2016-07-22\ntags: ['java', 'algorithms','datastructures', 'solutions','problems']\nauthor: Buddha\ndescription: This article shows you how to print right view of a binary tree, which using recursion. \n---\n\n![Right View of Binary Tree](https://c1.staticflickr.com/9/8878/28188948920_3c502f1584.jpg)\n\n## The Problem\n\nImagine you have a binary tree and wants to get all the nodes that will be visible when seen from the right side of the tree. How do you print all such nodes? Final output for this tree should be 44, 51, 65, 28. In other words, the first nodes we touch upon if we draw horizontal lines from right side of the tree. Read on to find the solution.\n\n <!-- more -->\n\n## The Solution\n\nQuicktip, whenever we try to do something without using recursion, you need to use some auxiliary datastructure like Queue or Stack. To solve this problem, we use a queue. \n\nTo solve this problem, we use a mechanism similar to {% post_link 2016/05/non-recursive-breadth-first-traversal-binary-tree Breadth First Traversal %}. \n\nWe start with pushing the root node and a null node into queue, to indicate first level is complete. We begin iterating until queue becomes empty. In every iteration, we dequeue a node, if it is not null node, we enqueue its children to the end of queue. We keep adding until children of all the nodes are added to queue. \n\nIf we encounter a null node, it means we reached end of the current level. We need to print the node dequeued before this node. To acheive this, we keep checking if next node in the queue is a null node by using `peek` method. As soon as the peek method returns null, it means this is the last node in the current level, we have to print it. If we get a null node, we have to check if there are more nodes to be dequeued, if there are no more nodes, we have reached end of the binary tree, otherwise, we just reached end of current level and more nodes are present in the queue. \n\nFind the program below.\n\n{% codeblock Right View of A Binary Tree lang:java %}\npublic void rightView(Node root) {\n    Queue<Node> queue = new Queue<>();\n    if(root != null) {\n        queue.enqueue(root);\n        queue.enqueue(null);  // first level is over\n    }\n\n    while (!queue.isEmpty()) {\n        Node temp = queue.dequeue();\n        if(temp == null) {\n            if(queue.getSize() > 0)\n                queue.enqueue(null);   // current level is over\n            continue;\n        }\n\n        if(queue.peek() == null)      // next node is null means end of current level, so print it.\n            System.out.println(temp.data);\n        if(temp.left != null)\n            queue.enqueue(temp.left);\n        if(temp.right != null)\n            queue.enqueue(temp.right);\n    }\n}\n{% endcodeblock %}\n\nBinaryTree siagram is generated by using [Binary Tree Visualizer](http://btv.melezinek.cz/binary-search-tree.html)\n\n\n----\n\nIf you are interested in non technical reading: [An escape or a possibility?](https://unfurledpages.wordpress.com/2016/06/01/an-escape-or-a-possibilty/)\n","slug":"2016/07/right-view-of-binarytree-without-recursion","published":1,"updated":"2016-07-22T15:02:14.000Z","_id":"ciqxunmk10000eqza2r7re4yl","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://c1.staticflickr.com/9/8878/28188948920_3c502f1584.jpg\" alt=\"Right View of Binary Tree\"></p>\n<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>Imagine you have a binary tree and wants to get all the nodes that will be visible when seen from the right side of the tree. How do you print all such nodes? Final output for this tree should be 44, 51, 65, 28. In other words, the first nodes we touch upon if we draw horizontal lines from right side of the tree. Read on to find the solution.</p>\n <a id=\"more\"></a>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>Quicktip, whenever we try to do something without using recursion, you need to use some auxiliary datastructure like Queue or Stack. To solve this problem, we use a queue. </p>\n<p>To solve this problem, we use a mechanism similar to <a href=\"/2016/05/non-recursive-breadth-first-traversal-binary-tree/\" title=\"Breadth First Traversal\">Breadth First Traversal</a>. </p>\n<p>We start with pushing the root node and a null node into queue, to indicate first level is complete. We begin iterating until queue becomes empty. In every iteration, we dequeue a node, if it is not null node, we enqueue its children to the end of queue. We keep adding until children of all the nodes are added to queue. </p>\n<p>If we encounter a null node, it means we reached end of the current level. We need to print the node dequeued before this node. To acheive this, we keep checking if next node in the queue is a null node by using <code>peek</code> method. As soon as the peek method returns null, it means this is the last node in the current level, we have to print it. If we get a null node, we have to check if there are more nodes to be dequeued, if there are no more nodes, we have reached end of the binary tree, otherwise, we just reached end of current level and more nodes are present in the queue. </p>\n<p>Find the program below.</p>\n<figure class=\"highlight java\"><figcaption><span>Right View of A Binary Tree</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rightView</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">    Queue&lt;Node&gt; queue = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        queue.enqueue(root);</span><br><span class=\"line\">        queue.enqueue(<span class=\"keyword\">null</span>);  <span class=\"comment\">// first level is over</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        Node temp = queue.dequeue();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(queue.getSize() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                queue.enqueue(<span class=\"keyword\">null</span>);   <span class=\"comment\">// current level is over</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(queue.peek() == <span class=\"keyword\">null</span>)      <span class=\"comment\">// next node is null means end of current level, so print it.</span></span><br><span class=\"line\">            System.out.println(temp.data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            queue.enqueue(temp.left);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            queue.enqueue(temp.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BinaryTree siagram is generated by using <a href=\"http://btv.melezinek.cz/binary-search-tree.html\" target=\"_blank\" rel=\"external\">Binary Tree Visualizer</a></p>\n<hr>\n<p>If you are interested in non technical reading: <a href=\"https://unfurledpages.wordpress.com/2016/06/01/an-escape-or-a-possibilty/\" target=\"_blank\" rel=\"external\">An escape or a possibility?</a></p>\n","excerpt":"<p><img src=\"https://c1.staticflickr.com/9/8878/28188948920_3c502f1584.jpg\" alt=\"Right View of Binary Tree\"></p>\n<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>Imagine you have a binary tree and wants to get all the nodes that will be visible when seen from the right side of the tree. How do you print all such nodes? Final output for this tree should be 44, 51, 65, 28. In other words, the first nodes we touch upon if we draw horizontal lines from right side of the tree. Read on to find the solution.</p>","more":"<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>Quicktip, whenever we try to do something without using recursion, you need to use some auxiliary datastructure like Queue or Stack. To solve this problem, we use a queue. </p>\n<p>To solve this problem, we use a mechanism similar to <a href=\"/2016/05/non-recursive-breadth-first-traversal-binary-tree/\" title=\"Breadth First Traversal\">Breadth First Traversal</a>. </p>\n<p>We start with pushing the root node and a null node into queue, to indicate first level is complete. We begin iterating until queue becomes empty. In every iteration, we dequeue a node, if it is not null node, we enqueue its children to the end of queue. We keep adding until children of all the nodes are added to queue. </p>\n<p>If we encounter a null node, it means we reached end of the current level. We need to print the node dequeued before this node. To acheive this, we keep checking if next node in the queue is a null node by using <code>peek</code> method. As soon as the peek method returns null, it means this is the last node in the current level, we have to print it. If we get a null node, we have to check if there are more nodes to be dequeued, if there are no more nodes, we have reached end of the binary tree, otherwise, we just reached end of current level and more nodes are present in the queue. </p>\n<p>Find the program below.</p>\n<figure class=\"highlight java\"><figcaption><span>Right View of A Binary Tree</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rightView</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">    Queue&lt;Node&gt; queue = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        queue.enqueue(root);</span><br><span class=\"line\">        queue.enqueue(<span class=\"keyword\">null</span>);  <span class=\"comment\">// first level is over</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        Node temp = queue.dequeue();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(queue.getSize() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                queue.enqueue(<span class=\"keyword\">null</span>);   <span class=\"comment\">// current level is over</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(queue.peek() == <span class=\"keyword\">null</span>)      <span class=\"comment\">// next node is null means end of current level, so print it.</span></span><br><span class=\"line\">            System.out.println(temp.data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            queue.enqueue(temp.left);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp.right != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            queue.enqueue(temp.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BinaryTree siagram is generated by using <a href=\"http://btv.melezinek.cz/binary-search-tree.html\">Binary Tree Visualizer</a></p>\n<hr>\n<p>If you are interested in non technical reading: <a href=\"https://unfurledpages.wordpress.com/2016/06/01/an-escape-or-a-possibilty/\">An escape or a possibility?</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciplf69im0002ouyg0xxl37xe","tag_id":"ciplf69jo0004ouyg9bep01tq","_id":"ciplf69m1000couyg9h3n9qyg"},{"post_id":"ciplf69im0002ouyg0xxl37xe","tag_id":"ciplf69l20007ouyg77mcv74u","_id":"ciplf69m1000douygjzw84cv9"},{"post_id":"ciplf69im0002ouyg0xxl37xe","tag_id":"ciplf69ly000aouygj74w7kdr","_id":"ciplf69m2000fouygr0xshdsu"},{"post_id":"ciplf69j60003ouygqj5q4j1i","tag_id":"ciplf69jo0004ouyg9bep01tq","_id":"ciplf69m6000jouygb2ih02wk"},{"post_id":"ciplf69j60003ouygqj5q4j1i","tag_id":"ciplf69m1000eouygdezl6uz1","_id":"ciplf69m7000kouyg91zq0ftw"},{"post_id":"ciplf69j60003ouygqj5q4j1i","tag_id":"ciplf69ly000aouygj74w7kdr","_id":"ciplf69m8000mouyg0x5t6yf6"},{"post_id":"ciplf69j60003ouygqj5q4j1i","tag_id":"ciplf69m3000houyg7by9z731","_id":"ciplf69m8000nouygsthggmwu"},{"post_id":"ciplf69ka0005ouygdqwr1w4v","tag_id":"ciplf69m4000iouygk7j7idb8","_id":"ciplf69mb000qouyg1e5kq8ch"},{"post_id":"ciplf69ka0005ouygdqwr1w4v","tag_id":"ciplf69m7000louyg5txicxpx","_id":"ciplf69mc000rouygmfxe2a0n"},{"post_id":"ciplf69ka0005ouygdqwr1w4v","tag_id":"ciplf69ma000oouyg3v1pgtw9","_id":"ciplf69mc000touygk6i174ww"},{"post_id":"ciplf69kq0006ouygvnxgiv9p","tag_id":"ciplf69ma000pouyg164k4it9","_id":"ciplf69mi000zouygpk9xx8ui"},{"post_id":"ciplf69kq0006ouygvnxgiv9p","tag_id":"ciplf69mc000souyg2scwyer8","_id":"ciplf69mi0010ouygrhzz3y1f"},{"post_id":"ciplf69kq0006ouygvnxgiv9p","tag_id":"ciplf69l20007ouyg77mcv74u","_id":"ciplf69mj0012ouyg0ash1uvq"},{"post_id":"ciplf69kq0006ouygvnxgiv9p","tag_id":"ciplf69me000vouygv41ar5mh","_id":"ciplf69mj0013ouygg02g54ft"},{"post_id":"ciplf69kq0006ouygvnxgiv9p","tag_id":"ciplf69mf000wouygvceyll89","_id":"ciplf69mj0015ouygkym0e3o8"},{"post_id":"ciplf69kq0006ouygvnxgiv9p","tag_id":"ciplf69mg000xouygui2e95do","_id":"ciplf69mk0016ouygnu6x1g6o"},{"post_id":"ciplf69l90008ouygzorbp3vb","tag_id":"ciplf69ma000pouyg164k4it9","_id":"ciplf69mn001aouygrktqeeh0"},{"post_id":"ciplf69l90008ouygzorbp3vb","tag_id":"ciplf69mi0011ouyg3cl0eu83","_id":"ciplf69mn001bouyg78px8lpz"},{"post_id":"ciplf69l90008ouygzorbp3vb","tag_id":"ciplf69l20007ouyg77mcv74u","_id":"ciplf69mo001douyg6gc36qs0"},{"post_id":"ciplf69l90008ouygzorbp3vb","tag_id":"ciplf69mg000xouygui2e95do","_id":"ciplf69mp001eouygdfbmvvy3"},{"post_id":"ciplf69l90008ouygzorbp3vb","tag_id":"ciplf69mk0018ouygrey1g83c","_id":"ciplf69ms001gouygdhk93u43"},{"post_id":"ciplf69lp0009ouygq15bnui3","tag_id":"ciplf69ml0019ouyg18z1qk2g","_id":"ciplf69ms001houygigu65iax"},{"post_id":"ciplf69lp0009ouygq15bnui3","tag_id":"ciplf69mn001couygn9vggck1","_id":"ciplf69ms001iouygq8p5lul7"},{"post_id":"ciplf69lp0009ouygq15bnui3","tag_id":"ciplf69mp001fouygb4wpo3wh","_id":"ciplf69mt001jouyg7ocxmy7p"},{"post_id":"ciplf69lp0009ouygq15bnui3","tag_id":"ciplf69l20007ouyg77mcv74u","_id":"ciplf69mt001kouyg4mpqeia6"},{"post_id":"ciplf69n4001louyguj3hs4f2","tag_id":"ciplf69m4000iouygk7j7idb8","_id":"ciplf69ni001pouyg3873ktcr"},{"post_id":"ciplf69n4001louyguj3hs4f2","tag_id":"ciplf69m7000louyg5txicxpx","_id":"ciplf69ni001qouygzs81rhcb"},{"post_id":"ciplf69n4001louyguj3hs4f2","tag_id":"ciplf69ma000oouyg3v1pgtw9","_id":"ciplf69ni001rouygrwgi6b7n"},{"post_id":"ciplf69n4001louyguj3hs4f2","tag_id":"ciplf69nf001mouygsmmb5pla","_id":"ciplf69ni001souyg0qntwkbn"},{"post_id":"ciplf69n4001louyguj3hs4f2","tag_id":"ciplf69ng001nouygboedgiop","_id":"ciplf69nl001touyg5l8ktub3"},{"post_id":"ciplf69n4001louyguj3hs4f2","tag_id":"ciplf69nh001oouygdk28zku6","_id":"ciplf69nl001uouygpu1bnn9u"},{"post_id":"ciqxunmk10000eqza2r7re4yl","tag_id":"ciplf69l20007ouyg77mcv74u","_id":"ciqxunmlb0002eqzaq3wnzu15"},{"post_id":"ciqxunmk10000eqza2r7re4yl","tag_id":"ciplf69mi0011ouyg3cl0eu83","_id":"ciqxunmlb0003eqza44dkgvrc"},{"post_id":"ciqxunmk10000eqza2r7re4yl","tag_id":"ciplf69mk0018ouygrey1g83c","_id":"ciqxunmlb0004eqza64z99w6r"},{"post_id":"ciqxunmk10000eqza2r7re4yl","tag_id":"ciqxunmkb0001eqzaoi6l14l6","_id":"ciqxunmlb0005eqza5s4je9aa"},{"post_id":"ciqxunmk10000eqza2r7re4yl","tag_id":"ciplf69ma000pouyg164k4it9","_id":"ciqxunmlb0006eqzaog3u57zk"}],"Tag":[{"name":"atg","_id":"ciplf69jo0004ouyg9bep01tq"},{"name":"java","_id":"ciplf69l20007ouyg77mcv74u"},{"name":"oraclecommerce","_id":"ciplf69ly000aouygj74w7kdr"},{"name":"configuration","_id":"ciplf69m1000eouygdezl6uz1"},{"name":"hack","_id":"ciplf69m3000houyg7by9z731"},{"name":"oraclejet","_id":"ciplf69m4000iouygk7j7idb8"},{"name":"javascript","_id":"ciplf69m7000louyg5txicxpx"},{"name":"html","_id":"ciplf69ma000oouyg3v1pgtw9"},{"name":"problems","_id":"ciplf69ma000pouyg164k4it9"},{"name":"codejam","_id":"ciplf69mc000souyg2scwyer8"},{"name":"puzzle","_id":"ciplf69me000vouygv41ar5mh"},{"name":"competition","_id":"ciplf69mf000wouygvceyll89"},{"name":"solution","_id":"ciplf69mg000xouygui2e95do"},{"name":"algorithms","_id":"ciplf69mi0011ouyg3cl0eu83"},{"name":"datastructures","_id":"ciplf69mk0018ouygrey1g83c"},{"name":"javafx","_id":"ciplf69ml0019ouyg18z1qk2g"},{"name":"opensource","_id":"ciplf69mn001couygn9vggck1"},{"name":"perforce","_id":"ciplf69mp001fouygb4wpo3wh"},{"name":"knockoutjs","_id":"ciplf69nf001mouygsmmb5pla"},{"name":"jquery","_id":"ciplf69ng001nouygboedgiop"},{"name":"css","_id":"ciplf69nh001oouygdk28zku6"},{"name":"solutions","_id":"ciqxunmkb0001eqzaoi6l14l6"}]}}